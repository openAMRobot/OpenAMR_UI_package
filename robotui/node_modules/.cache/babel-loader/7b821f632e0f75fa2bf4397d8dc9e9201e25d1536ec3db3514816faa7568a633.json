{"ast":null,"code":"import { transformedNormalView } from '../../accessors/NormalNode.js';\nimport { positionViewDirection } from '../../accessors/PositionNode.js';\nimport { tslFn, vec2, vec4 } from '../../shadernode/ShaderNode.js';\n\n// Analytical approximation of the DFG LUT, one half of the\n// split-sum approximation used in indirect specular lighting.\n// via 'environmentBRDF' from \"Physically Based Shading on Mobile\"\n// https://www.unrealengine.com/blog/physically-based-shading-on-mobile\nvar DFGApprox = tslFn(function (inputs) {\n  var roughness = inputs.roughness;\n  var dotNV = inputs.dotNV || transformedNormalView.dot(positionViewDirection).clamp(); // @ TODO: Move to core dotNV\n\n  var c0 = vec4(-1, -0.0275, -0.572, 0.022);\n  var c1 = vec4(1, 0.0425, 1.04, -0.04);\n  var r = roughness.mul(c0).add(c1);\n  var a004 = r.x.mul(r.x).min(dotNV.mul(-9.28).exp2()).mul(r.x).add(r.y);\n  var fab = vec2(-1.04, 1.04).mul(a004).add(r.zw);\n  return fab;\n});\nexport default DFGApprox;","map":{"version":3,"names":["transformedNormalView","positionViewDirection","tslFn","vec2","vec4","DFGApprox","inputs","roughness","dotNV","dot","clamp","c0","c1","r","mul","add","a004","x","min","exp2","y","fab","zw"],"sources":["/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/three/examples/jsm/nodes/functions/BSDF/DFGApprox.js"],"sourcesContent":["import { transformedNormalView } from '../../accessors/NormalNode.js';\nimport { positionViewDirection } from '../../accessors/PositionNode.js';\nimport { tslFn, vec2, vec4 } from '../../shadernode/ShaderNode.js';\n\n// Analytical approximation of the DFG LUT, one half of the\n// split-sum approximation used in indirect specular lighting.\n// via 'environmentBRDF' from \"Physically Based Shading on Mobile\"\n// https://www.unrealengine.com/blog/physically-based-shading-on-mobile\nconst DFGApprox = tslFn( ( inputs ) => {\n\n\tconst { roughness } = inputs;\n\n\tconst dotNV = inputs.dotNV || transformedNormalView.dot( positionViewDirection ).clamp(); // @ TODO: Move to core dotNV\n\n\tconst c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\n\tconst c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\n\tconst r = roughness.mul( c0 ).add( c1 );\n\n\tconst a004 = r.x.mul( r.x ).min( dotNV.mul( - 9.28 ).exp2() ).mul( r.x ).add( r.y );\n\n\tconst fab = vec2( - 1.04, 1.04 ).mul( a004 ).add( r.zw );\n\n\treturn fab;\n\n} );\n\nexport default DFGApprox;\n"],"mappings":"AAAA,SAASA,qBAAqB,QAAQ,+BAA+B;AACrE,SAASC,qBAAqB,QAAQ,iCAAiC;AACvE,SAASC,KAAK,EAAEC,IAAI,EAAEC,IAAI,QAAQ,gCAAgC;;AAElE;AACA;AACA;AACA;AACA,IAAMC,SAAS,GAAGH,KAAK,CAAE,UAAEI,MAAM,EAAM;EAEtC,IAAQC,SAAS,GAAKD,MAAM,CAApBC,SAAS;EAEjB,IAAMC,KAAK,GAAGF,MAAM,CAACE,KAAK,IAAIR,qBAAqB,CAACS,GAAG,CAAER,qBAAsB,CAAC,CAACS,KAAK,CAAC,CAAC,CAAC,CAAC;;EAE1F,IAAMC,EAAE,GAAGP,IAAI,CAAE,CAAE,CAAC,EAAE,CAAE,MAAM,EAAE,CAAE,KAAK,EAAE,KAAM,CAAC;EAEhD,IAAMQ,EAAE,GAAGR,IAAI,CAAE,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAE,IAAK,CAAC;EAE1C,IAAMS,CAAC,GAAGN,SAAS,CAACO,GAAG,CAAEH,EAAG,CAAC,CAACI,GAAG,CAAEH,EAAG,CAAC;EAEvC,IAAMI,IAAI,GAAGH,CAAC,CAACI,CAAC,CAACH,GAAG,CAAED,CAAC,CAACI,CAAE,CAAC,CAACC,GAAG,CAAEV,KAAK,CAACM,GAAG,CAAE,CAAE,IAAK,CAAC,CAACK,IAAI,CAAC,CAAE,CAAC,CAACL,GAAG,CAAED,CAAC,CAACI,CAAE,CAAC,CAACF,GAAG,CAAEF,CAAC,CAACO,CAAE,CAAC;EAEnF,IAAMC,GAAG,GAAGlB,IAAI,CAAE,CAAE,IAAI,EAAE,IAAK,CAAC,CAACW,GAAG,CAAEE,IAAK,CAAC,CAACD,GAAG,CAAEF,CAAC,CAACS,EAAG,CAAC;EAExD,OAAOD,GAAG;AAEX,CAAE,CAAC;AAEH,eAAehB,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}