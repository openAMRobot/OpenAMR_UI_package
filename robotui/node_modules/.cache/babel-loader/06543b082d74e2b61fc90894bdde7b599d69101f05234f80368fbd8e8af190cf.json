{"ast":null,"code":"import _classCallCheck from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport TextureNode from './TextureNode.js';\nimport UniformNode from '../core/UniformNode.js';\nimport { reflectVector } from './ReflectVectorNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { colorSpaceToLinear } from '../display/ColorSpaceNode.js';\nimport { expression } from '../code/ExpressionNode.js';\nimport { addNodeElement, nodeProxy, vec3 } from '../shadernode/ShaderNode.js';\nvar CubeTextureNode = /*#__PURE__*/function (_TextureNode) {\n  _inherits(CubeTextureNode, _TextureNode);\n  var _super = _createSuper(CubeTextureNode);\n  function CubeTextureNode(value) {\n    var _this;\n    var uvNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var levelNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    _classCallCheck(this, CubeTextureNode);\n    _this = _super.call(this, value, uvNode, levelNode);\n    _this.isCubeTextureNode = true;\n    return _this;\n  }\n  _createClass(CubeTextureNode, [{\n    key: \"getInputType\",\n    value: function getInputType( /*builder*/\n    ) {\n      return 'cubeTexture';\n    }\n  }, {\n    key: \"getDefaultUV\",\n    value: function getDefaultUV() {\n      return reflectVector;\n    }\n  }, {\n    key: \"setUpdateMatrix\",\n    value: function setUpdateMatrix( /*updateMatrix*/) {} // Ignore .updateMatrix for CubeTextureNode\n  }, {\n    key: \"generate\",\n    value: function generate(builder, output) {\n      var _builder$getNodePrope = builder.getNodeProperties(this),\n        uvNode = _builder$getNodePrope.uvNode,\n        levelNode = _builder$getNodePrope.levelNode;\n      var texture = this.value;\n      if (!texture || texture.isCubeTexture !== true) {\n        throw new Error('CubeTextureNode: Need a three.js cube texture.');\n      }\n      var textureProperty = UniformNode.prototype.generate.call(this, builder, 'cubeTexture');\n      if (output === 'sampler') {\n        return textureProperty + '_sampler';\n      } else if (builder.isReference(output)) {\n        return textureProperty;\n      } else {\n        var nodeType = this.getNodeType(builder);\n        var nodeData = builder.getDataFromNode(this);\n        var propertyName = nodeData.propertyName;\n        if (propertyName === undefined) {\n          var cubeUV = vec3(uvNode.x.negate(), uvNode.yz);\n          var uvSnippet = cubeUV.build(builder, 'vec3');\n          var nodeVar = builder.getVarFromNode(this, 'vec4');\n          propertyName = builder.getPropertyName(nodeVar);\n          var _snippet = null;\n          if (levelNode && levelNode.isNode === true) {\n            var levelSnippet = levelNode.build(builder, 'float');\n            _snippet = builder.getTextureLevel(this, textureProperty, uvSnippet, levelSnippet);\n          } else {\n            _snippet = builder.getTexture(this, textureProperty, uvSnippet);\n          }\n          builder.addLineFlowCode(\"\".concat(propertyName, \" = \").concat(_snippet));\n          if (builder.context.tempWrite !== false) {\n            nodeData.snippet = _snippet;\n            nodeData.propertyName = propertyName;\n          }\n        }\n        var snippet = propertyName;\n        if (builder.needsColorSpaceToLinear(this.value)) {\n          snippet = colorSpaceToLinear(expression(snippet, nodeType), this.value.colorSpace).setup(builder).build(builder, nodeType);\n        }\n        return builder.format(snippet, 'vec4', output);\n      }\n    }\n  }]);\n  return CubeTextureNode;\n}(TextureNode);\nexport default CubeTextureNode;\nexport var cubeTexture = nodeProxy(CubeTextureNode);\naddNodeElement('cubeTexture', cubeTexture);\naddNodeClass('CubeTextureNode', CubeTextureNode);","map":{"version":3,"names":["TextureNode","UniformNode","reflectVector","addNodeClass","colorSpaceToLinear","expression","addNodeElement","nodeProxy","vec3","CubeTextureNode","_TextureNode","_inherits","_super","_createSuper","value","_this","uvNode","arguments","length","undefined","levelNode","_classCallCheck","call","isCubeTextureNode","_createClass","key","getInputType","getDefaultUV","setUpdateMatrix","generate","builder","output","_builder$getNodePrope","getNodeProperties","texture","isCubeTexture","Error","textureProperty","prototype","isReference","nodeType","getNodeType","nodeData","getDataFromNode","propertyName","cubeUV","x","negate","yz","uvSnippet","build","nodeVar","getVarFromNode","getPropertyName","snippet","isNode","levelSnippet","getTextureLevel","getTexture","addLineFlowCode","concat","context","tempWrite","needsColorSpaceToLinear","colorSpace","setup","format","cubeTexture"],"sources":["/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/three/examples/jsm/nodes/accessors/CubeTextureNode.js"],"sourcesContent":["import TextureNode from './TextureNode.js';\nimport UniformNode from '../core/UniformNode.js';\nimport { reflectVector } from './ReflectVectorNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { colorSpaceToLinear } from '../display/ColorSpaceNode.js';\nimport { expression } from '../code/ExpressionNode.js';\nimport { addNodeElement, nodeProxy, vec3 } from '../shadernode/ShaderNode.js';\n\nclass CubeTextureNode extends TextureNode {\n\n\tconstructor( value, uvNode = null, levelNode = null ) {\n\n\t\tsuper( value, uvNode, levelNode );\n\n\t\tthis.isCubeTextureNode = true;\n\n\t}\n\n\tgetInputType( /*builder*/ ) {\n\n\t\treturn 'cubeTexture';\n\n\t}\n\n\tgetDefaultUV() {\n\n\t\treturn reflectVector;\n\n\t}\n\n\tsetUpdateMatrix( /*updateMatrix*/ ) { } // Ignore .updateMatrix for CubeTextureNode\n\n\tgenerate( builder, output ) {\n\n\t\tconst { uvNode, levelNode } = builder.getNodeProperties( this );\n\n\t\tconst texture = this.value;\n\n\t\tif ( ! texture || texture.isCubeTexture !== true ) {\n\n\t\t\tthrow new Error( 'CubeTextureNode: Need a three.js cube texture.' );\n\n\t\t}\n\n\t\tconst textureProperty = UniformNode.prototype.generate.call( this, builder, 'cubeTexture' );\n\n\t\tif ( output === 'sampler' ) {\n\n\t\t\treturn textureProperty + '_sampler';\n\n\t\t} else if ( builder.isReference( output ) ) {\n\n\t\t\treturn textureProperty;\n\n\t\t} else {\n\n\t\t\tconst nodeType = this.getNodeType( builder );\n\t\t\tconst nodeData = builder.getDataFromNode( this );\n\n\t\t\tlet propertyName = nodeData.propertyName;\n\n\t\t\tif ( propertyName === undefined ) {\n\n\t\t\t\tconst cubeUV = vec3( uvNode.x.negate(), uvNode.yz );\n\t\t\t\tconst uvSnippet = cubeUV.build( builder, 'vec3' );\n\n\t\t\t\tconst nodeVar = builder.getVarFromNode( this, 'vec4' );\n\n\t\t\t\tpropertyName = builder.getPropertyName( nodeVar );\n\n\t\t\t\tlet snippet = null;\n\n\t\t\t\tif ( levelNode && levelNode.isNode === true ) {\n\n\t\t\t\t\tconst levelSnippet = levelNode.build( builder, 'float' );\n\n\t\t\t\t\tsnippet = builder.getTextureLevel( this, textureProperty, uvSnippet, levelSnippet );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsnippet = builder.getTexture( this, textureProperty, uvSnippet );\n\n\t\t\t\t}\n\n\t\t\t\tbuilder.addLineFlowCode( `${propertyName} = ${snippet}` );\n\n\t\t\t\tif ( builder.context.tempWrite !== false ) {\n\n\t\t\t\t\tnodeData.snippet = snippet;\n\t\t\t\t\tnodeData.propertyName = propertyName;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlet snippet = propertyName;\n\n\t\t\tif ( builder.needsColorSpaceToLinear( this.value ) ) {\n\n\t\t\t\tsnippet = colorSpaceToLinear( expression( snippet, nodeType ), this.value.colorSpace ).setup( builder ).build( builder, nodeType );\n\n\t\t\t}\n\n\t\t\treturn builder.format( snippet, 'vec4', output );\n\n\t\t}\n\n\t}\n\n}\n\nexport default CubeTextureNode;\n\nexport const cubeTexture = nodeProxy( CubeTextureNode );\n\naddNodeElement( 'cubeTexture', cubeTexture );\n\naddNodeClass( 'CubeTextureNode', CubeTextureNode );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}