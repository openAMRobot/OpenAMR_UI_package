{"ast":null,"code":"import _classCallCheck from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport NodeMaterial, { addNodeMaterial } from './NodeMaterial.js';\nimport { diffuseColor, metalness, roughness, specularColor } from '../core/PropertyNode.js';\nimport { mix } from '../math/MathNode.js';\nimport { materialRoughness, materialMetalness } from '../accessors/MaterialNode.js';\nimport getRoughness from '../functions/material/getRoughness.js';\nimport PhysicalLightingModel from '../functions/PhysicalLightingModel.js';\nimport { float, vec3, vec4 } from '../shadernode/ShaderNode.js';\nimport { MeshStandardMaterial } from 'three';\nvar defaultValues = new MeshStandardMaterial();\nvar MeshStandardNodeMaterial = /*#__PURE__*/function (_NodeMaterial) {\n  _inherits(MeshStandardNodeMaterial, _NodeMaterial);\n  var _super = _createSuper(MeshStandardNodeMaterial);\n  function MeshStandardNodeMaterial(parameters) {\n    var _this;\n    _classCallCheck(this, MeshStandardNodeMaterial);\n    _this = _super.call(this);\n    _this.isMeshStandardNodeMaterial = true;\n    _this.emissiveNode = null;\n    _this.metalnessNode = null;\n    _this.roughnessNode = null;\n    _this.setDefaultValues(defaultValues);\n    _this.setValues(parameters);\n    return _this;\n  }\n  _createClass(MeshStandardNodeMaterial, [{\n    key: \"setupLightingModel\",\n    value: function setupLightingModel( /*builder*/\n    ) {\n      return new PhysicalLightingModel(false, false); // ( clearcoat, sheen ) -> standard\n    }\n  }, {\n    key: \"setupVariants\",\n    value: function setupVariants(_ref) {\n      var stack = _ref.stack;\n      // METALNESS\n\n      var metalnessNode = this.metalnessNode ? float(this.metalnessNode) : materialMetalness;\n      stack.assign(metalness, metalnessNode);\n\n      // ROUGHNESS\n\n      var roughnessNode = this.roughnessNode ? float(this.roughnessNode) : materialRoughness;\n      roughnessNode = getRoughness({\n        roughness: roughnessNode\n      });\n      stack.assign(roughness, roughnessNode);\n\n      // SPECULAR COLOR\n\n      var specularColorNode = mix(vec3(0.04), diffuseColor.rgb, metalnessNode);\n      stack.assign(specularColor, specularColorNode);\n\n      // DIFFUSE COLOR\n\n      stack.assign(diffuseColor, vec4(diffuseColor.rgb.mul(metalnessNode.oneMinus()), diffuseColor.a));\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(source) {\n      this.emissiveNode = source.emissiveNode;\n      this.metalnessNode = source.metalnessNode;\n      this.roughnessNode = source.roughnessNode;\n      return _get(_getPrototypeOf(MeshStandardNodeMaterial.prototype), \"copy\", this).call(this, source);\n    }\n  }]);\n  return MeshStandardNodeMaterial;\n}(NodeMaterial);\nexport default MeshStandardNodeMaterial;\naddNodeMaterial('MeshStandardNodeMaterial', MeshStandardNodeMaterial);","map":{"version":3,"names":["NodeMaterial","addNodeMaterial","diffuseColor","metalness","roughness","specularColor","mix","materialRoughness","materialMetalness","getRoughness","PhysicalLightingModel","float","vec3","vec4","MeshStandardMaterial","defaultValues","MeshStandardNodeMaterial","_NodeMaterial","_inherits","_super","_createSuper","parameters","_this","_classCallCheck","call","isMeshStandardNodeMaterial","emissiveNode","metalnessNode","roughnessNode","setDefaultValues","setValues","_createClass","key","value","setupLightingModel","setupVariants","_ref","stack","assign","specularColorNode","rgb","mul","oneMinus","a","copy","source","_get","_getPrototypeOf","prototype"],"sources":["/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/three/examples/jsm/nodes/materials/MeshStandardNodeMaterial.js"],"sourcesContent":["import NodeMaterial, { addNodeMaterial } from './NodeMaterial.js';\nimport { diffuseColor, metalness, roughness, specularColor } from '../core/PropertyNode.js';\nimport { mix } from '../math/MathNode.js';\nimport { materialRoughness, materialMetalness } from '../accessors/MaterialNode.js';\nimport getRoughness from '../functions/material/getRoughness.js';\nimport PhysicalLightingModel from '../functions/PhysicalLightingModel.js';\nimport { float, vec3, vec4 } from '../shadernode/ShaderNode.js';\n\nimport { MeshStandardMaterial } from 'three';\n\nconst defaultValues = new MeshStandardMaterial();\n\nclass MeshStandardNodeMaterial extends NodeMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshStandardNodeMaterial = true;\n\n\t\tthis.emissiveNode = null;\n\n\t\tthis.metalnessNode = null;\n\t\tthis.roughnessNode = null;\n\n\t\tthis.setDefaultValues( defaultValues );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tsetupLightingModel( /*builder*/ ) {\n\n\t\treturn new PhysicalLightingModel( false, false ); // ( clearcoat, sheen ) -> standard\n\n\t}\n\n\tsetupVariants( { stack } ) {\n\n\t\t// METALNESS\n\n\t\tconst metalnessNode = this.metalnessNode ? float( this.metalnessNode ) : materialMetalness;\n\n\t\tstack.assign( metalness, metalnessNode );\n\n\t\t// ROUGHNESS\n\n\t\tlet roughnessNode = this.roughnessNode ? float( this.roughnessNode ) : materialRoughness;\n\t\troughnessNode = getRoughness( { roughness: roughnessNode } );\n\n\t\tstack.assign( roughness, roughnessNode );\n\n\t\t// SPECULAR COLOR\n\n\t\tconst specularColorNode = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessNode );\n\n\t\tstack.assign( specularColor, specularColorNode );\n\n\t\t// DIFFUSE COLOR\n\n\t\tstack.assign( diffuseColor, vec4( diffuseColor.rgb.mul( metalnessNode.oneMinus() ), diffuseColor.a ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.emissiveNode = source.emissiveNode;\n\n\t\tthis.metalnessNode = source.metalnessNode;\n\t\tthis.roughnessNode = source.roughnessNode;\n\n\t\treturn super.copy( source );\n\n\t}\n\n}\n\nexport default MeshStandardNodeMaterial;\n\naddNodeMaterial( 'MeshStandardNodeMaterial', MeshStandardNodeMaterial );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}