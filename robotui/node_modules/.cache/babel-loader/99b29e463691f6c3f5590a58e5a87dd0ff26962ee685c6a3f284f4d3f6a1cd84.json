{"ast":null,"code":"import _classCallCheck from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport Node, { addNodeClass } from '../core/Node.js';\nimport { varying } from '../core/VaryingNode.js';\nimport { normalize } from '../math/MathNode.js';\nimport { cameraViewMatrix } from './CameraNode.js';\nimport { normalGeometry, normalLocal, normalView, normalWorld, transformedNormalView } from './NormalNode.js';\nimport { tangentGeometry, tangentLocal, tangentView, tangentWorld, transformedTangentView } from './TangentNode.js';\nimport { nodeImmutable } from '../shadernode/ShaderNode.js';\nvar BitangentNode = /*#__PURE__*/function (_Node) {\n  _inherits(BitangentNode, _Node);\n  var _super = _createSuper(BitangentNode);\n  function BitangentNode() {\n    var _this;\n    var scope = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : BitangentNode.LOCAL;\n    _classCallCheck(this, BitangentNode);\n    _this = _super.call(this, 'vec3');\n    _this.scope = scope;\n    return _this;\n  }\n  _createClass(BitangentNode, [{\n    key: \"getHash\",\n    value: function getHash( /*builder*/\n    ) {\n      return \"bitangent-\".concat(this.scope);\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(builder) {\n      var scope = this.scope;\n      var crossNormalTangent;\n      if (scope === BitangentNode.GEOMETRY) {\n        crossNormalTangent = normalGeometry.cross(tangentGeometry);\n      } else if (scope === BitangentNode.LOCAL) {\n        crossNormalTangent = normalLocal.cross(tangentLocal);\n      } else if (scope === BitangentNode.VIEW) {\n        crossNormalTangent = normalView.cross(tangentView);\n      } else if (scope === BitangentNode.WORLD) {\n        crossNormalTangent = normalWorld.cross(tangentWorld);\n      }\n      var vertexNode = crossNormalTangent.mul(tangentGeometry.w).xyz;\n      var outputNode = normalize(varying(vertexNode));\n      return outputNode.build(builder, this.getNodeType(builder));\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize(data) {\n      _get(_getPrototypeOf(BitangentNode.prototype), \"serialize\", this).call(this, data);\n      data.scope = this.scope;\n    }\n  }, {\n    key: \"deserialize\",\n    value: function deserialize(data) {\n      _get(_getPrototypeOf(BitangentNode.prototype), \"deserialize\", this).call(this, data);\n      this.scope = data.scope;\n    }\n  }]);\n  return BitangentNode;\n}(Node);\nBitangentNode.GEOMETRY = 'geometry';\nBitangentNode.LOCAL = 'local';\nBitangentNode.VIEW = 'view';\nBitangentNode.WORLD = 'world';\nexport default BitangentNode;\nexport var bitangentGeometry = nodeImmutable(BitangentNode, BitangentNode.GEOMETRY);\nexport var bitangentLocal = nodeImmutable(BitangentNode, BitangentNode.LOCAL);\nexport var bitangentView = nodeImmutable(BitangentNode, BitangentNode.VIEW);\nexport var bitangentWorld = nodeImmutable(BitangentNode, BitangentNode.WORLD);\nexport var transformedBitangentView = normalize(transformedNormalView.cross(transformedTangentView).mul(tangentGeometry.w));\nexport var transformedBitangentWorld = normalize(transformedBitangentView.transformDirection(cameraViewMatrix));\naddNodeClass('BitangentNode', BitangentNode);","map":{"version":3,"names":["Node","addNodeClass","varying","normalize","cameraViewMatrix","normalGeometry","normalLocal","normalView","normalWorld","transformedNormalView","tangentGeometry","tangentLocal","tangentView","tangentWorld","transformedTangentView","nodeImmutable","BitangentNode","_Node","_inherits","_super","_createSuper","_this","scope","arguments","length","undefined","LOCAL","_classCallCheck","call","_createClass","key","value","getHash","concat","generate","builder","crossNormalTangent","GEOMETRY","cross","VIEW","WORLD","vertexNode","mul","w","xyz","outputNode","build","getNodeType","serialize","data","_get","_getPrototypeOf","prototype","deserialize","bitangentGeometry","bitangentLocal","bitangentView","bitangentWorld","transformedBitangentView","transformedBitangentWorld","transformDirection"],"sources":["/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/three/examples/jsm/nodes/accessors/BitangentNode.js"],"sourcesContent":["import Node, { addNodeClass } from '../core/Node.js';\nimport { varying } from '../core/VaryingNode.js';\nimport { normalize } from '../math/MathNode.js';\nimport { cameraViewMatrix } from './CameraNode.js';\nimport { normalGeometry, normalLocal, normalView, normalWorld, transformedNormalView } from './NormalNode.js';\nimport { tangentGeometry, tangentLocal, tangentView, tangentWorld, transformedTangentView } from './TangentNode.js';\nimport { nodeImmutable } from '../shadernode/ShaderNode.js';\n\nclass BitangentNode extends Node {\n\n\tconstructor( scope = BitangentNode.LOCAL ) {\n\n\t\tsuper( 'vec3' );\n\n\t\tthis.scope = scope;\n\n\t}\n\n\tgetHash( /*builder*/ ) {\n\n\t\treturn `bitangent-${this.scope}`;\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst scope = this.scope;\n\n\t\tlet crossNormalTangent;\n\n\t\tif ( scope === BitangentNode.GEOMETRY ) {\n\n\t\t\tcrossNormalTangent = normalGeometry.cross( tangentGeometry );\n\n\t\t} else if ( scope === BitangentNode.LOCAL ) {\n\n\t\t\tcrossNormalTangent = normalLocal.cross( tangentLocal );\n\n\t\t} else if ( scope === BitangentNode.VIEW ) {\n\n\t\t\tcrossNormalTangent = normalView.cross( tangentView );\n\n\t\t} else if ( scope === BitangentNode.WORLD ) {\n\n\t\t\tcrossNormalTangent = normalWorld.cross( tangentWorld );\n\n\t\t}\n\n\t\tconst vertexNode = crossNormalTangent.mul( tangentGeometry.w ).xyz;\n\n\t\tconst outputNode = normalize( varying( vertexNode ) );\n\n\t\treturn outputNode.build( builder, this.getNodeType( builder ) );\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.scope = this.scope;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.scope = data.scope;\n\n\t}\n\n}\n\nBitangentNode.GEOMETRY = 'geometry';\nBitangentNode.LOCAL = 'local';\nBitangentNode.VIEW = 'view';\nBitangentNode.WORLD = 'world';\n\nexport default BitangentNode;\n\nexport const bitangentGeometry = nodeImmutable( BitangentNode, BitangentNode.GEOMETRY );\nexport const bitangentLocal = nodeImmutable( BitangentNode, BitangentNode.LOCAL );\nexport const bitangentView = nodeImmutable( BitangentNode, BitangentNode.VIEW );\nexport const bitangentWorld = nodeImmutable( BitangentNode, BitangentNode.WORLD );\nexport const transformedBitangentView = normalize( transformedNormalView.cross( transformedTangentView ).mul( tangentGeometry.w ) );\nexport const transformedBitangentWorld = normalize( transformedBitangentView.transformDirection( cameraViewMatrix ) );\n\naddNodeClass( 'BitangentNode', BitangentNode );\n"],"mappings":";;;;;;AAAA,OAAOA,IAAI,IAAIC,YAAY,QAAQ,iBAAiB;AACpD,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SAASC,cAAc,EAAEC,WAAW,EAAEC,UAAU,EAAEC,WAAW,EAAEC,qBAAqB,QAAQ,iBAAiB;AAC7G,SAASC,eAAe,EAAEC,YAAY,EAAEC,WAAW,EAAEC,YAAY,EAAEC,sBAAsB,QAAQ,kBAAkB;AACnH,SAASC,aAAa,QAAQ,6BAA6B;AAAC,IAEtDC,aAAa,0BAAAC,KAAA;EAAAC,SAAA,CAAAF,aAAA,EAAAC,KAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,aAAA;EAElB,SAAAA,cAAA,EAA2C;IAAA,IAAAK,KAAA;IAAA,IAA9BC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGP,aAAa,CAACU,KAAK;IAAAC,eAAA,OAAAX,aAAA;IAEvCK,KAAA,GAAAF,MAAA,CAAAS,IAAA,OAAO,MAAM;IAEbP,KAAA,CAAKC,KAAK,GAAGA,KAAK;IAAC,OAAAD,KAAA;EAEpB;EAACQ,YAAA,CAAAb,aAAA;IAAAc,GAAA;IAAAC,KAAA,EAED,SAAAC,QAAA,CAAS;IAAA,EAAc;MAEtB,oBAAAC,MAAA,CAAoB,IAAI,CAACX,KAAK;IAE/B;EAAC;IAAAQ,GAAA;IAAAC,KAAA,EAED,SAAAG,SAAUC,OAAO,EAAG;MAEnB,IAAMb,KAAK,GAAG,IAAI,CAACA,KAAK;MAExB,IAAIc,kBAAkB;MAEtB,IAAKd,KAAK,KAAKN,aAAa,CAACqB,QAAQ,EAAG;QAEvCD,kBAAkB,GAAG/B,cAAc,CAACiC,KAAK,CAAE5B,eAAgB,CAAC;MAE7D,CAAC,MAAM,IAAKY,KAAK,KAAKN,aAAa,CAACU,KAAK,EAAG;QAE3CU,kBAAkB,GAAG9B,WAAW,CAACgC,KAAK,CAAE3B,YAAa,CAAC;MAEvD,CAAC,MAAM,IAAKW,KAAK,KAAKN,aAAa,CAACuB,IAAI,EAAG;QAE1CH,kBAAkB,GAAG7B,UAAU,CAAC+B,KAAK,CAAE1B,WAAY,CAAC;MAErD,CAAC,MAAM,IAAKU,KAAK,KAAKN,aAAa,CAACwB,KAAK,EAAG;QAE3CJ,kBAAkB,GAAG5B,WAAW,CAAC8B,KAAK,CAAEzB,YAAa,CAAC;MAEvD;MAEA,IAAM4B,UAAU,GAAGL,kBAAkB,CAACM,GAAG,CAAEhC,eAAe,CAACiC,CAAE,CAAC,CAACC,GAAG;MAElE,IAAMC,UAAU,GAAG1C,SAAS,CAAED,OAAO,CAAEuC,UAAW,CAAE,CAAC;MAErD,OAAOI,UAAU,CAACC,KAAK,CAAEX,OAAO,EAAE,IAAI,CAACY,WAAW,CAAEZ,OAAQ,CAAE,CAAC;IAEhE;EAAC;IAAAL,GAAA;IAAAC,KAAA,EAED,SAAAiB,UAAWC,IAAI,EAAG;MAEjBC,IAAA,CAAAC,eAAA,CAAAnC,aAAA,CAAAoC,SAAA,sBAAAxB,IAAA,OAAiBqB,IAAI;MAErBA,IAAI,CAAC3B,KAAK,GAAG,IAAI,CAACA,KAAK;IAExB;EAAC;IAAAQ,GAAA;IAAAC,KAAA,EAED,SAAAsB,YAAaJ,IAAI,EAAG;MAEnBC,IAAA,CAAAC,eAAA,CAAAnC,aAAA,CAAAoC,SAAA,wBAAAxB,IAAA,OAAmBqB,IAAI;MAEvB,IAAI,CAAC3B,KAAK,GAAG2B,IAAI,CAAC3B,KAAK;IAExB;EAAC;EAAA,OAAAN,aAAA;AAAA,EA9D0BhB,IAAI;AAkEhCgB,aAAa,CAACqB,QAAQ,GAAG,UAAU;AACnCrB,aAAa,CAACU,KAAK,GAAG,OAAO;AAC7BV,aAAa,CAACuB,IAAI,GAAG,MAAM;AAC3BvB,aAAa,CAACwB,KAAK,GAAG,OAAO;AAE7B,eAAexB,aAAa;AAE5B,OAAO,IAAMsC,iBAAiB,GAAGvC,aAAa,CAAEC,aAAa,EAAEA,aAAa,CAACqB,QAAS,CAAC;AACvF,OAAO,IAAMkB,cAAc,GAAGxC,aAAa,CAAEC,aAAa,EAAEA,aAAa,CAACU,KAAM,CAAC;AACjF,OAAO,IAAM8B,aAAa,GAAGzC,aAAa,CAAEC,aAAa,EAAEA,aAAa,CAACuB,IAAK,CAAC;AAC/E,OAAO,IAAMkB,cAAc,GAAG1C,aAAa,CAAEC,aAAa,EAAEA,aAAa,CAACwB,KAAM,CAAC;AACjF,OAAO,IAAMkB,wBAAwB,GAAGvD,SAAS,CAAEM,qBAAqB,CAAC6B,KAAK,CAAExB,sBAAuB,CAAC,CAAC4B,GAAG,CAAEhC,eAAe,CAACiC,CAAE,CAAE,CAAC;AACnI,OAAO,IAAMgB,yBAAyB,GAAGxD,SAAS,CAAEuD,wBAAwB,CAACE,kBAAkB,CAAExD,gBAAiB,CAAE,CAAC;AAErHH,YAAY,CAAE,eAAe,EAAEe,aAAc,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}