{"ast":null,"code":"import _classCallCheck from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { NodeUpdateType } from './constants.js';\nvar NodeFrame = /*#__PURE__*/function () {\n  function NodeFrame() {\n    _classCallCheck(this, NodeFrame);\n    this.time = 0;\n    this.deltaTime = 0;\n    this.frameId = 0;\n    this.renderId = 0;\n    this.startTime = null;\n    this.updateMap = new WeakMap();\n    this.updateBeforeMap = new WeakMap();\n    this.renderer = null;\n    this.material = null;\n    this.camera = null;\n    this.object = null;\n    this.scene = null;\n  }\n  _createClass(NodeFrame, [{\n    key: \"_getMaps\",\n    value: function _getMaps(referenceMap, nodeRef) {\n      var maps = referenceMap.get(nodeRef);\n      if (maps === undefined) {\n        maps = {\n          renderMap: new WeakMap(),\n          frameMap: new WeakMap()\n        };\n        referenceMap.set(nodeRef, maps);\n      }\n      return maps;\n    }\n  }, {\n    key: \"updateBeforeNode\",\n    value: function updateBeforeNode(node) {\n      var updateType = node.getUpdateBeforeType();\n      var reference = node.updateReference(this);\n      var _this$_getMaps = this._getMaps(this.updateBeforeMap, reference),\n        frameMap = _this$_getMaps.frameMap,\n        renderMap = _this$_getMaps.renderMap;\n      if (updateType === NodeUpdateType.FRAME) {\n        if (frameMap.get(node) !== this.frameId) {\n          frameMap.set(node, this.frameId);\n          node.updateBefore(this);\n        }\n      } else if (updateType === NodeUpdateType.RENDER) {\n        if (renderMap.get(node) !== this.renderId || frameMap.get(node) !== this.frameId) {\n          renderMap.set(node, this.renderId);\n          frameMap.set(node, this.frameId);\n          node.updateBefore(this);\n        }\n      } else if (updateType === NodeUpdateType.OBJECT) {\n        node.updateBefore(this);\n      }\n    }\n  }, {\n    key: \"updateNode\",\n    value: function updateNode(node) {\n      var updateType = node.getUpdateType();\n      var reference = node.updateReference(this);\n      var _this$_getMaps2 = this._getMaps(this.updateMap, reference),\n        frameMap = _this$_getMaps2.frameMap,\n        renderMap = _this$_getMaps2.renderMap;\n      if (updateType === NodeUpdateType.FRAME) {\n        if (frameMap.get(node) !== this.frameId) {\n          frameMap.set(node, this.frameId);\n          node.update(this);\n        }\n      } else if (updateType === NodeUpdateType.RENDER) {\n        if (renderMap.get(node) !== this.renderId || frameMap.get(node) !== this.frameId) {\n          renderMap.set(node, this.renderId);\n          frameMap.set(node, this.frameId);\n          node.update(this);\n        }\n      } else if (updateType === NodeUpdateType.OBJECT) {\n        node.update(this);\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.frameId++;\n      if (this.lastTime === undefined) this.lastTime = performance.now();\n      this.deltaTime = (performance.now() - this.lastTime) / 1000;\n      this.lastTime = performance.now();\n      this.time += this.deltaTime;\n    }\n  }]);\n  return NodeFrame;\n}();\nexport default NodeFrame;","map":{"version":3,"names":["NodeUpdateType","NodeFrame","_classCallCheck","time","deltaTime","frameId","renderId","startTime","updateMap","WeakMap","updateBeforeMap","renderer","material","camera","object","scene","_createClass","key","value","_getMaps","referenceMap","nodeRef","maps","get","undefined","renderMap","frameMap","set","updateBeforeNode","node","updateType","getUpdateBeforeType","reference","updateReference","_this$_getMaps","FRAME","updateBefore","RENDER","OBJECT","updateNode","getUpdateType","_this$_getMaps2","update","lastTime","performance","now"],"sources":["/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/three/examples/jsm/nodes/core/NodeFrame.js"],"sourcesContent":["import { NodeUpdateType } from './constants.js';\n\nclass NodeFrame {\n\n\tconstructor() {\n\n\t\tthis.time = 0;\n\t\tthis.deltaTime = 0;\n\n\t\tthis.frameId = 0;\n\t\tthis.renderId = 0;\n\n\t\tthis.startTime = null;\n\n\t\tthis.updateMap = new WeakMap();\n\t\tthis.updateBeforeMap = new WeakMap();\n\n\t\tthis.renderer = null;\n\t\tthis.material = null;\n\t\tthis.camera = null;\n\t\tthis.object = null;\n\t\tthis.scene = null;\n\n\t}\n\n\t_getMaps( referenceMap, nodeRef ) {\n\n\t\tlet maps = referenceMap.get( nodeRef );\n\n\t\tif ( maps === undefined ) {\n\n\t\t\tmaps = {\n\t\t\t\trenderMap: new WeakMap(),\n\t\t\t\tframeMap: new WeakMap()\n\t\t\t};\n\n\t\t\treferenceMap.set( nodeRef, maps );\n\n\t\t}\n\n\t\treturn maps;\n\n\t}\n\n\tupdateBeforeNode( node ) {\n\n\t\tconst updateType = node.getUpdateBeforeType();\n\t\tconst reference = node.updateReference( this );\n\n\t\tconst { frameMap, renderMap } = this._getMaps( this.updateBeforeMap, reference );\n\n\t\tif ( updateType === NodeUpdateType.FRAME ) {\n\n\t\t\tif ( frameMap.get( node ) !== this.frameId ) {\n\n\t\t\t\tframeMap.set( node, this.frameId );\n\n\t\t\t\tnode.updateBefore( this );\n\n\t\t\t}\n\n\t\t} else if ( updateType === NodeUpdateType.RENDER ) {\n\n\t\t\tif ( renderMap.get( node ) !== this.renderId || frameMap.get( node ) !== this.frameId ) {\n\n\t\t\t\trenderMap.set( node, this.renderId );\n\t\t\t\tframeMap.set( node, this.frameId );\n\n\t\t\t\tnode.updateBefore( this );\n\n\t\t\t}\n\n\t\t} else if ( updateType === NodeUpdateType.OBJECT ) {\n\n\t\t\tnode.updateBefore( this );\n\n\t\t}\n\n\t}\n\n\tupdateNode( node ) {\n\n\t\tconst updateType = node.getUpdateType();\n\t\tconst reference = node.updateReference( this );\n\n\t\tconst { frameMap, renderMap } = this._getMaps( this.updateMap, reference );\n\n\t\tif ( updateType === NodeUpdateType.FRAME ) {\n\n\t\t\tif ( frameMap.get( node ) !== this.frameId ) {\n\n\t\t\t\tframeMap.set( node, this.frameId );\n\n\t\t\t\tnode.update( this );\n\n\t\t\t}\n\n\t\t} else if ( updateType === NodeUpdateType.RENDER ) {\n\n\t\t\tif ( renderMap.get( node ) !== this.renderId || frameMap.get( node ) !== this.frameId ) {\n\n\t\t\t\trenderMap.set( node, this.renderId );\n\t\t\t\tframeMap.set( node, this.frameId );\n\n\t\t\t\tnode.update( this );\n\n\t\t\t}\n\n\t\t} else if ( updateType === NodeUpdateType.OBJECT ) {\n\n\t\t\tnode.update( this );\n\n\t\t}\n\n\t}\n\n\tupdate() {\n\n\t\tthis.frameId ++;\n\n\t\tif ( this.lastTime === undefined ) this.lastTime = performance.now();\n\n\t\tthis.deltaTime = ( performance.now() - this.lastTime ) / 1000;\n\n\t\tthis.lastTime = performance.now();\n\n\t\tthis.time += this.deltaTime;\n\n\t}\n\n}\n\nexport default NodeFrame;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}