{"ast":null,"code":"import _classCallCheck from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { addNodeMaterial } from './NodeMaterial.js';\nimport { transformedClearcoatNormalView } from '../accessors/NormalNode.js';\nimport { clearcoat, clearcoatRoughness, sheen, sheenRoughness, iridescence, iridescenceIOR, iridescenceThickness } from '../core/PropertyNode.js';\nimport { materialClearcoatNormal } from '../accessors/ExtendedMaterialNode.js';\nimport { materialClearcoat, materialClearcoatRoughness, materialSheen, materialSheenRoughness, materialIridescence, materialIridescenceIOR, materialIridescenceThickness } from '../accessors/MaterialNode.js';\nimport { float, vec3 } from '../shadernode/ShaderNode.js';\nimport PhysicalLightingModel from '../functions/PhysicalLightingModel.js';\nimport MeshStandardNodeMaterial from './MeshStandardNodeMaterial.js';\nimport { MeshPhysicalMaterial } from 'three';\nvar defaultValues = new MeshPhysicalMaterial();\nvar MeshPhysicalNodeMaterial = /*#__PURE__*/function (_MeshStandardNodeMate) {\n  _inherits(MeshPhysicalNodeMaterial, _MeshStandardNodeMate);\n  var _super = _createSuper(MeshPhysicalNodeMaterial);\n  function MeshPhysicalNodeMaterial(parameters) {\n    var _this;\n    _classCallCheck(this, MeshPhysicalNodeMaterial);\n    _this = _super.call(this);\n    _this.isMeshPhysicalNodeMaterial = true;\n    _this.clearcoatNode = null;\n    _this.clearcoatRoughnessNode = null;\n    _this.clearcoatNormalNode = null;\n    _this.sheenNode = null;\n    _this.sheenRoughnessNode = null;\n    _this.iridescenceNode = null;\n    _this.iridescenceIORNode = null;\n    _this.iridescenceThicknessNode = null;\n    _this.specularIntensityNode = null;\n    _this.specularColorNode = null;\n    _this.transmissionNode = null;\n    _this.thicknessNode = null;\n    _this.attenuationDistanceNode = null;\n    _this.attenuationColorNode = null;\n    _this.setDefaultValues(defaultValues);\n    _this.setValues(parameters);\n    return _this;\n  }\n  _createClass(MeshPhysicalNodeMaterial, [{\n    key: \"setupLightingModel\",\n    value: function setupLightingModel( /*builder*/\n    ) {\n      return new PhysicalLightingModel(); // @TODO: Optimize shader using parameters.\n    }\n  }, {\n    key: \"setupVariants\",\n    value: function setupVariants(builder) {\n      _get(_getPrototypeOf(MeshPhysicalNodeMaterial.prototype), \"setupVariants\", this).call(this, builder);\n      var stack = builder.stack;\n\n      // CLEARCOAT\n\n      var clearcoatNode = this.clearcoatNode ? float(this.clearcoatNode) : materialClearcoat;\n      var clearcoatRoughnessNode = this.clearcoatRoughnessNode ? float(this.clearcoatRoughnessNode) : materialClearcoatRoughness;\n      stack.assign(clearcoat, clearcoatNode);\n      stack.assign(clearcoatRoughness, clearcoatRoughnessNode);\n\n      // SHEEN\n\n      var sheenNode = this.sheenNode ? vec3(this.sheenNode) : materialSheen;\n      var sheenRoughnessNode = this.sheenRoughnessNode ? float(this.sheenRoughnessNode) : materialSheenRoughness;\n      stack.assign(sheen, sheenNode);\n      stack.assign(sheenRoughness, sheenRoughnessNode);\n\n      // IRIDESCENCE\n\n      var iridescenceNode = this.iridescenceNode ? float(this.iridescenceNode) : materialIridescence;\n      var iridescenceIORNode = this.iridescenceIORNode ? float(this.iridescenceIORNode) : materialIridescenceIOR;\n      var iridescenceThicknessNode = this.iridescenceThicknessNode ? float(this.iridescenceThicknessNode) : materialIridescenceThickness;\n      stack.assign(iridescence, iridescenceNode);\n      stack.assign(iridescenceIOR, iridescenceIORNode);\n      stack.assign(iridescenceThickness, iridescenceThicknessNode);\n    }\n  }, {\n    key: \"setupNormal\",\n    value: function setupNormal(builder) {\n      _get(_getPrototypeOf(MeshPhysicalNodeMaterial.prototype), \"setupNormal\", this).call(this, builder);\n\n      // CLEARCOAT NORMAL\n\n      var clearcoatNormalNode = this.clearcoatNormalNode ? vec3(this.clearcoatNormalNode) : materialClearcoatNormal;\n      builder.stack.assign(transformedClearcoatNormalView, clearcoatNormalNode);\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(source) {\n      this.clearcoatNode = source.clearcoatNode;\n      this.clearcoatRoughnessNode = source.clearcoatRoughnessNode;\n      this.clearcoatNormalNode = source.clearcoatNormalNode;\n      this.sheenNode = source.sheenNode;\n      this.sheenRoughnessNode = source.sheenRoughnessNode;\n      this.iridescenceNode = source.iridescenceNode;\n      this.iridescenceIORNode = source.iridescenceIORNode;\n      this.iridescenceThicknessNode = source.iridescenceThicknessNode;\n      this.specularIntensityNode = source.specularIntensityNode;\n      this.specularColorNode = source.specularColorNode;\n      this.transmissionNode = source.transmissionNode;\n      this.thicknessNode = source.thicknessNode;\n      this.attenuationDistanceNode = source.attenuationDistanceNode;\n      this.attenuationColorNode = source.attenuationColorNode;\n      return _get(_getPrototypeOf(MeshPhysicalNodeMaterial.prototype), \"copy\", this).call(this, source);\n    }\n  }]);\n  return MeshPhysicalNodeMaterial;\n}(MeshStandardNodeMaterial);\nexport default MeshPhysicalNodeMaterial;\naddNodeMaterial('MeshPhysicalNodeMaterial', MeshPhysicalNodeMaterial);","map":{"version":3,"names":["addNodeMaterial","transformedClearcoatNormalView","clearcoat","clearcoatRoughness","sheen","sheenRoughness","iridescence","iridescenceIOR","iridescenceThickness","materialClearcoatNormal","materialClearcoat","materialClearcoatRoughness","materialSheen","materialSheenRoughness","materialIridescence","materialIridescenceIOR","materialIridescenceThickness","float","vec3","PhysicalLightingModel","MeshStandardNodeMaterial","MeshPhysicalMaterial","defaultValues","MeshPhysicalNodeMaterial","_MeshStandardNodeMate","_inherits","_super","_createSuper","parameters","_this","_classCallCheck","call","isMeshPhysicalNodeMaterial","clearcoatNode","clearcoatRoughnessNode","clearcoatNormalNode","sheenNode","sheenRoughnessNode","iridescenceNode","iridescenceIORNode","iridescenceThicknessNode","specularIntensityNode","specularColorNode","transmissionNode","thicknessNode","attenuationDistanceNode","attenuationColorNode","setDefaultValues","setValues","_createClass","key","value","setupLightingModel","setupVariants","builder","_get","_getPrototypeOf","prototype","stack","assign","setupNormal","copy","source"],"sources":["/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/three/examples/jsm/nodes/materials/MeshPhysicalNodeMaterial.js"],"sourcesContent":["import { addNodeMaterial } from './NodeMaterial.js';\nimport { transformedClearcoatNormalView } from '../accessors/NormalNode.js';\nimport { clearcoat, clearcoatRoughness, sheen, sheenRoughness, iridescence, iridescenceIOR, iridescenceThickness } from '../core/PropertyNode.js';\nimport { materialClearcoatNormal } from '../accessors/ExtendedMaterialNode.js';\nimport { materialClearcoat, materialClearcoatRoughness, materialSheen, materialSheenRoughness, materialIridescence, materialIridescenceIOR, materialIridescenceThickness } from '../accessors/MaterialNode.js';\nimport { float, vec3 } from '../shadernode/ShaderNode.js';\nimport PhysicalLightingModel from '../functions/PhysicalLightingModel.js';\nimport MeshStandardNodeMaterial from './MeshStandardNodeMaterial.js';\n\nimport { MeshPhysicalMaterial } from 'three';\n\nconst defaultValues = new MeshPhysicalMaterial();\n\nclass MeshPhysicalNodeMaterial extends MeshStandardNodeMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshPhysicalNodeMaterial = true;\n\n\t\tthis.clearcoatNode = null;\n\t\tthis.clearcoatRoughnessNode = null;\n\t\tthis.clearcoatNormalNode = null;\n\n\t\tthis.sheenNode = null;\n\t\tthis.sheenRoughnessNode = null;\n\n\t\tthis.iridescenceNode = null;\n\t\tthis.iridescenceIORNode = null;\n\t\tthis.iridescenceThicknessNode = null;\n\n\t\tthis.specularIntensityNode = null;\n\t\tthis.specularColorNode = null;\n\n\t\tthis.transmissionNode = null;\n\t\tthis.thicknessNode = null;\n\t\tthis.attenuationDistanceNode = null;\n\t\tthis.attenuationColorNode = null;\n\n\t\tthis.setDefaultValues( defaultValues );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tsetupLightingModel( /*builder*/ ) {\n\n\t\treturn new PhysicalLightingModel(); // @TODO: Optimize shader using parameters.\n\n\t}\n\n\tsetupVariants( builder ) {\n\n\t\tsuper.setupVariants( builder );\n\n\t\tconst { stack } = builder;\n\n\t\t// CLEARCOAT\n\n\t\tconst clearcoatNode = this.clearcoatNode ? float( this.clearcoatNode ) : materialClearcoat;\n\t\tconst clearcoatRoughnessNode = this.clearcoatRoughnessNode ? float( this.clearcoatRoughnessNode ) : materialClearcoatRoughness;\n\n\t\tstack.assign( clearcoat, clearcoatNode );\n\t\tstack.assign( clearcoatRoughness, clearcoatRoughnessNode );\n\n\t\t// SHEEN\n\n\t\tconst sheenNode = this.sheenNode ? vec3( this.sheenNode ) : materialSheen;\n\t\tconst sheenRoughnessNode = this.sheenRoughnessNode ? float( this.sheenRoughnessNode ) : materialSheenRoughness;\n\n\t\tstack.assign( sheen, sheenNode );\n\t\tstack.assign( sheenRoughness, sheenRoughnessNode );\n\n\t\t// IRIDESCENCE\n\n\t\tconst iridescenceNode = this.iridescenceNode ? float( this.iridescenceNode ) : materialIridescence;\n\t\tconst iridescenceIORNode = this.iridescenceIORNode ? float( this.iridescenceIORNode ) : materialIridescenceIOR;\n\t\tconst iridescenceThicknessNode = this.iridescenceThicknessNode ? float( this.iridescenceThicknessNode ) : materialIridescenceThickness;\n\n\t\tstack.assign( iridescence, iridescenceNode );\n\t\tstack.assign( iridescenceIOR, iridescenceIORNode );\n\t\tstack.assign( iridescenceThickness, iridescenceThicknessNode );\n\n\t}\n\n\tsetupNormal( builder ) {\n\n\t\tsuper.setupNormal( builder );\n\n\t\t// CLEARCOAT NORMAL\n\n\t\tconst clearcoatNormalNode = this.clearcoatNormalNode ? vec3( this.clearcoatNormalNode ) : materialClearcoatNormal;\n\n\t\tbuilder.stack.assign( transformedClearcoatNormalView, clearcoatNormalNode );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.clearcoatNode = source.clearcoatNode;\n\t\tthis.clearcoatRoughnessNode = source.clearcoatRoughnessNode;\n\t\tthis.clearcoatNormalNode = source.clearcoatNormalNode;\n\n\t\tthis.sheenNode = source.sheenNode;\n\t\tthis.sheenRoughnessNode = source.sheenRoughnessNode;\n\n\t\tthis.iridescenceNode = source.iridescenceNode;\n\t\tthis.iridescenceIORNode = source.iridescenceIORNode;\n\t\tthis.iridescenceThicknessNode = source.iridescenceThicknessNode;\n\n\t\tthis.specularIntensityNode = source.specularIntensityNode;\n\t\tthis.specularColorNode = source.specularColorNode;\n\n\t\tthis.transmissionNode = source.transmissionNode;\n\t\tthis.thicknessNode = source.thicknessNode;\n\t\tthis.attenuationDistanceNode = source.attenuationDistanceNode;\n\t\tthis.attenuationColorNode = source.attenuationColorNode;\n\n\t\treturn super.copy( source );\n\n\t}\n\n}\n\nexport default MeshPhysicalNodeMaterial;\n\naddNodeMaterial( 'MeshPhysicalNodeMaterial', MeshPhysicalNodeMaterial );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}