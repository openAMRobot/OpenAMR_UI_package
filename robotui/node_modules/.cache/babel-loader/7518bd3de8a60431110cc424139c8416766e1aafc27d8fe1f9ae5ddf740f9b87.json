{"ast":null,"code":"import _classCallCheck from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport TempNode from '../core/TempNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { addNodeElement, nodeProxy } from '../shadernode/ShaderNode.js';\nvar OperatorNode = /*#__PURE__*/function (_TempNode) {\n  _inherits(OperatorNode, _TempNode);\n  var _super = _createSuper(OperatorNode);\n  function OperatorNode(op, aNode, bNode) {\n    var _this;\n    _classCallCheck(this, OperatorNode);\n    _this = _super.call(this);\n    _this.op = op;\n    if ((arguments.length <= 3 ? 0 : arguments.length - 3) > 0) {\n      var finalBNode = bNode;\n      for (var i = 0; i < (arguments.length <= 3 ? 0 : arguments.length - 3); i++) {\n        finalBNode = new OperatorNode(op, finalBNode, i + 3 < 3 || arguments.length <= i + 3 ? undefined : arguments[i + 3]);\n      }\n      bNode = finalBNode;\n    }\n    _this.aNode = aNode;\n    _this.bNode = bNode;\n    return _this;\n  }\n  _createClass(OperatorNode, [{\n    key: \"hasDependencies\",\n    value: function hasDependencies(builder) {\n      return this.op !== '=' ? _get(_getPrototypeOf(OperatorNode.prototype), \"hasDependencies\", this).call(this, builder) : false;\n    }\n  }, {\n    key: \"getNodeType\",\n    value: function getNodeType(builder, output) {\n      var op = this.op;\n      var aNode = this.aNode;\n      var bNode = this.bNode;\n      var typeA = aNode.getNodeType(builder);\n      var typeB = bNode.getNodeType(builder);\n      if (typeA === 'void' || typeB === 'void') {\n        return 'void';\n      } else if (op === '=' || op === '%') {\n        return typeA;\n      } else if (op === '&' || op === '|' || op === '^' || op === '>>' || op === '<<') {\n        return builder.getIntegerType(typeA);\n      } else if (op === '==' || op === '&&' || op === '||' || op === '^^') {\n        return 'bool';\n      } else if (op === '<' || op === '>' || op === '<=' || op === '>=') {\n        var typeLength = output ? builder.getTypeLength(output) : Math.max(builder.getTypeLength(typeA), builder.getTypeLength(typeB));\n        return typeLength > 1 ? \"bvec\".concat(typeLength) : 'bool';\n      } else {\n        if (typeA === 'float' && builder.isMatrix(typeB)) {\n          return typeB;\n        } else if (builder.isMatrix(typeA) && builder.isVector(typeB)) {\n          // matrix x vector\n\n          return builder.getVectorFromMatrix(typeA);\n        } else if (builder.isVector(typeA) && builder.isMatrix(typeB)) {\n          // vector x matrix\n\n          return builder.getVectorFromMatrix(typeB);\n        } else if (builder.getTypeLength(typeB) > builder.getTypeLength(typeA)) {\n          // anytype x anytype: use the greater length vector\n\n          return typeB;\n        }\n        return typeA;\n      }\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(builder, output) {\n      var op = this.op;\n      var aNode = this.aNode;\n      var bNode = this.bNode;\n      var type = this.getNodeType(builder, output);\n      var typeA = null;\n      var typeB = null;\n      if (type !== 'void') {\n        typeA = aNode.getNodeType(builder);\n        typeB = bNode.getNodeType(builder);\n        if (op === '=') {\n          typeB = typeA;\n        } else if (op === '<' || op === '>' || op === '<=' || op === '>=' || op === '==') {\n          if (builder.isVector(typeA)) {\n            typeB = typeA;\n          } else {\n            typeA = typeB = 'float';\n          }\n        } else if (op === '>>' || op === '<<') {\n          typeA = type;\n          typeB = builder.changeComponentType(typeB, 'uint');\n        } else if (builder.isMatrix(typeA) && builder.isVector(typeB)) {\n          // matrix x vector\n\n          typeB = builder.getVectorFromMatrix(typeA);\n        } else if (builder.isVector(typeA) && builder.isMatrix(typeB)) {\n          // vector x matrix\n\n          typeA = builder.getVectorFromMatrix(typeB);\n        } else {\n          // anytype x anytype\n\n          typeA = typeB = type;\n        }\n      } else {\n        typeA = typeB = type;\n      }\n      var a = aNode.build(builder, typeA);\n      var b = bNode.build(builder, typeB);\n      var outputLength = builder.getTypeLength(output);\n      if (output !== 'void') {\n        if (op === '=') {\n          builder.addLineFlowCode(\"\".concat(a, \" \").concat(this.op, \" \").concat(b));\n          return a;\n        } else if (op === '<' && outputLength > 1) {\n          return builder.format(\"\".concat(builder.getMethod('lessThan'), \"( \").concat(a, \", \").concat(b, \" )\"), type, output);\n        } else if (op === '<=' && outputLength > 1) {\n          return builder.format(\"\".concat(builder.getMethod('lessThanEqual'), \"( \").concat(a, \", \").concat(b, \" )\"), type, output);\n        } else if (op === '>' && outputLength > 1) {\n          return builder.format(\"\".concat(builder.getMethod('greaterThan'), \"( \").concat(a, \", \").concat(b, \" )\"), type, output);\n        } else if (op === '>=' && outputLength > 1) {\n          return builder.format(\"\".concat(builder.getMethod('greaterThanEqual'), \"( \").concat(a, \", \").concat(b, \" )\"), type, output);\n        } else {\n          return builder.format(\"( \".concat(a, \" \").concat(this.op, \" \").concat(b, \" )\"), type, output);\n        }\n      } else if (typeA !== 'void') {\n        return builder.format(\"\".concat(a, \" \").concat(this.op, \" \").concat(b), type, output);\n      }\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize(data) {\n      _get(_getPrototypeOf(OperatorNode.prototype), \"serialize\", this).call(this, data);\n      data.op = this.op;\n    }\n  }, {\n    key: \"deserialize\",\n    value: function deserialize(data) {\n      _get(_getPrototypeOf(OperatorNode.prototype), \"deserialize\", this).call(this, data);\n      this.op = data.op;\n    }\n  }]);\n  return OperatorNode;\n}(TempNode);\nexport default OperatorNode;\nexport var add = nodeProxy(OperatorNode, '+');\nexport var sub = nodeProxy(OperatorNode, '-');\nexport var mul = nodeProxy(OperatorNode, '*');\nexport var div = nodeProxy(OperatorNode, '/');\nexport var remainder = nodeProxy(OperatorNode, '%');\nexport var equal = nodeProxy(OperatorNode, '==');\nexport var assign = nodeProxy(OperatorNode, '=');\nexport var lessThan = nodeProxy(OperatorNode, '<');\nexport var greaterThan = nodeProxy(OperatorNode, '>');\nexport var lessThanEqual = nodeProxy(OperatorNode, '<=');\nexport var greaterThanEqual = nodeProxy(OperatorNode, '>=');\nexport var and = nodeProxy(OperatorNode, '&&');\nexport var or = nodeProxy(OperatorNode, '||');\nexport var xor = nodeProxy(OperatorNode, '^^');\nexport var bitAnd = nodeProxy(OperatorNode, '&');\nexport var bitOr = nodeProxy(OperatorNode, '|');\nexport var bitXor = nodeProxy(OperatorNode, '^');\nexport var shiftLeft = nodeProxy(OperatorNode, '<<');\nexport var shiftRight = nodeProxy(OperatorNode, '>>');\naddNodeElement('add', add);\naddNodeElement('sub', sub);\naddNodeElement('mul', mul);\naddNodeElement('div', div);\naddNodeElement('remainder', remainder);\naddNodeElement('equal', equal);\naddNodeElement('assign', assign);\naddNodeElement('lessThan', lessThan);\naddNodeElement('greaterThan', greaterThan);\naddNodeElement('lessThanEqual', lessThanEqual);\naddNodeElement('greaterThanEqual', greaterThanEqual);\naddNodeElement('and', and);\naddNodeElement('or', or);\naddNodeElement('xor', xor);\naddNodeElement('bitAnd', bitAnd);\naddNodeElement('bitOr', bitOr);\naddNodeElement('bitXor', bitXor);\naddNodeElement('shiftLeft', shiftLeft);\naddNodeElement('shiftRight', shiftRight);\naddNodeClass('OperatorNode', OperatorNode);","map":{"version":3,"names":["TempNode","addNodeClass","addNodeElement","nodeProxy","OperatorNode","_TempNode","_inherits","_super","_createSuper","op","aNode","bNode","_this","_classCallCheck","call","arguments","length","finalBNode","i","undefined","_createClass","key","value","hasDependencies","builder","_get","_getPrototypeOf","prototype","getNodeType","output","typeA","typeB","getIntegerType","typeLength","getTypeLength","Math","max","concat","isMatrix","isVector","getVectorFromMatrix","generate","type","changeComponentType","a","build","b","outputLength","addLineFlowCode","format","getMethod","serialize","data","deserialize","add","sub","mul","div","remainder","equal","assign","lessThan","greaterThan","lessThanEqual","greaterThanEqual","and","or","xor","bitAnd","bitOr","bitXor","shiftLeft","shiftRight"],"sources":["/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/three/examples/jsm/nodes/math/OperatorNode.js"],"sourcesContent":["import TempNode from '../core/TempNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { addNodeElement, nodeProxy } from '../shadernode/ShaderNode.js';\n\nclass OperatorNode extends TempNode {\n\n\tconstructor( op, aNode, bNode, ...params ) {\n\n\t\tsuper();\n\n\t\tthis.op = op;\n\n\t\tif ( params.length > 0 ) {\n\n\t\t\tlet finalBNode = bNode;\n\n\t\t\tfor ( let i = 0; i < params.length; i ++ ) {\n\n\t\t\t\tfinalBNode = new OperatorNode( op, finalBNode, params[ i ] );\n\n\t\t\t}\n\n\t\t\tbNode = finalBNode;\n\n\t\t}\n\n\t\tthis.aNode = aNode;\n\t\tthis.bNode = bNode;\n\n\t}\n\n\thasDependencies( builder ) {\n\n\t\treturn this.op !== '=' ? super.hasDependencies( builder ) : false;\n\n\t}\n\n\tgetNodeType( builder, output ) {\n\n\t\tconst op = this.op;\n\n\t\tconst aNode = this.aNode;\n\t\tconst bNode = this.bNode;\n\n\t\tconst typeA = aNode.getNodeType( builder );\n\t\tconst typeB = bNode.getNodeType( builder );\n\n\t\tif ( typeA === 'void' || typeB === 'void' ) {\n\n\t\t\treturn 'void';\n\n\t\t} else if ( op === '=' || op === '%' ) {\n\n\t\t\treturn typeA;\n\n\t\t} else if ( op === '&' || op === '|' || op === '^' || op === '>>' || op === '<<' ) {\n\n\t\t\treturn builder.getIntegerType( typeA );\n\n\t\t} else if ( op === '==' || op === '&&' || op === '||' || op === '^^' ) {\n\n\t\t\treturn 'bool';\n\n\t\t} else if ( op === '<' || op === '>' || op === '<=' || op === '>=' ) {\n\n\t\t\tconst typeLength = output ? builder.getTypeLength( output ) : Math.max( builder.getTypeLength( typeA ), builder.getTypeLength( typeB ) );\n\n\t\t\treturn typeLength > 1 ? `bvec${ typeLength }` : 'bool';\n\n\t\t} else {\n\n\t\t\tif ( typeA === 'float' && builder.isMatrix( typeB ) ) {\n\n\t\t\t\treturn typeB;\n\n\t\t\t} else if ( builder.isMatrix( typeA ) && builder.isVector( typeB ) ) {\n\n\t\t\t\t// matrix x vector\n\n\t\t\t\treturn builder.getVectorFromMatrix( typeA );\n\n\t\t\t} else if ( builder.isVector( typeA ) && builder.isMatrix( typeB ) ) {\n\n\t\t\t\t// vector x matrix\n\n\t\t\t\treturn builder.getVectorFromMatrix( typeB );\n\n\t\t\t} else if ( builder.getTypeLength( typeB ) > builder.getTypeLength( typeA ) ) {\n\n\t\t\t\t// anytype x anytype: use the greater length vector\n\n\t\t\t\treturn typeB;\n\n\t\t\t}\n\n\t\t\treturn typeA;\n\n\t\t}\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst op = this.op;\n\n\t\tconst aNode = this.aNode;\n\t\tconst bNode = this.bNode;\n\n\t\tconst type = this.getNodeType( builder, output );\n\n\t\tlet typeA = null;\n\t\tlet typeB = null;\n\n\t\tif ( type !== 'void' ) {\n\n\t\t\ttypeA = aNode.getNodeType( builder );\n\t\t\ttypeB = bNode.getNodeType( builder );\n\n\t\t\tif ( op === '=' ) {\n\n\t\t\t\ttypeB = typeA;\n\n\t\t\t} else if ( op === '<' || op === '>' || op === '<=' || op === '>=' || op === '==' ) {\n\n\t\t\t\tif ( builder.isVector( typeA ) ) {\n\n\t\t\t\t\ttypeB = typeA;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttypeA = typeB = 'float';\n\n\t\t\t\t}\n\n\t\t\t} else if ( op === '>>' || op === '<<' ) {\n\n\t\t\t\ttypeA = type;\n\t\t\t\ttypeB = builder.changeComponentType( typeB, 'uint' );\n\n\t\t\t} else if ( builder.isMatrix( typeA ) && builder.isVector( typeB ) ) {\n\n\t\t\t\t// matrix x vector\n\n\t\t\t\ttypeB = builder.getVectorFromMatrix( typeA );\n\n\t\t\t} else if ( builder.isVector( typeA ) && builder.isMatrix( typeB ) ) {\n\n\t\t\t\t// vector x matrix\n\n\t\t\t\ttypeA = builder.getVectorFromMatrix( typeB );\n\n\t\t\t} else {\n\n\t\t\t\t// anytype x anytype\n\n\t\t\t\ttypeA = typeB = type;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\ttypeA = typeB = type;\n\n\t\t}\n\n\t\tconst a = aNode.build( builder, typeA );\n\t\tconst b = bNode.build( builder, typeB );\n\n\t\tconst outputLength = builder.getTypeLength( output );\n\n\t\tif ( output !== 'void' ) {\n\n\t\t\tif ( op === '=' ) {\n\n\t\t\t\tbuilder.addLineFlowCode( `${a} ${this.op} ${b}` );\n\n\t\t\t\treturn a;\n\n\t\t\t} else if ( op === '<' && outputLength > 1 ) {\n\n\t\t\t\treturn builder.format( `${ builder.getMethod( 'lessThan' ) }( ${a}, ${b} )`, type, output );\n\n\t\t\t} else if ( op === '<=' && outputLength > 1 ) {\n\n\t\t\t\treturn builder.format( `${ builder.getMethod( 'lessThanEqual' ) }( ${a}, ${b} )`, type, output );\n\n\t\t\t} else if ( op === '>' && outputLength > 1 ) {\n\n\t\t\t\treturn builder.format( `${ builder.getMethod( 'greaterThan' ) }( ${a}, ${b} )`, type, output );\n\n\t\t\t} else if ( op === '>=' && outputLength > 1 ) {\n\n\t\t\t\treturn builder.format( `${ builder.getMethod( 'greaterThanEqual' ) }( ${a}, ${b} )`, type, output );\n\n\t\t\t} else {\n\n\t\t\t\treturn builder.format( `( ${a} ${this.op} ${b} )`, type, output );\n\n\t\t\t}\n\n\t\t} else if ( typeA !== 'void' ) {\n\n\t\t\treturn builder.format( `${a} ${this.op} ${b}`, type, output );\n\n\t\t}\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.op = this.op;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.op = data.op;\n\n\t}\n\n}\n\nexport default OperatorNode;\n\nexport const add = nodeProxy( OperatorNode, '+' );\nexport const sub = nodeProxy( OperatorNode, '-' );\nexport const mul = nodeProxy( OperatorNode, '*' );\nexport const div = nodeProxy( OperatorNode, '/' );\nexport const remainder = nodeProxy( OperatorNode, '%' );\nexport const equal = nodeProxy( OperatorNode, '==' );\nexport const assign = nodeProxy( OperatorNode, '=' );\nexport const lessThan = nodeProxy( OperatorNode, '<' );\nexport const greaterThan = nodeProxy( OperatorNode, '>' );\nexport const lessThanEqual = nodeProxy( OperatorNode, '<=' );\nexport const greaterThanEqual = nodeProxy( OperatorNode, '>=' );\nexport const and = nodeProxy( OperatorNode, '&&' );\nexport const or = nodeProxy( OperatorNode, '||' );\nexport const xor = nodeProxy( OperatorNode, '^^' );\nexport const bitAnd = nodeProxy( OperatorNode, '&' );\nexport const bitOr = nodeProxy( OperatorNode, '|' );\nexport const bitXor = nodeProxy( OperatorNode, '^' );\nexport const shiftLeft = nodeProxy( OperatorNode, '<<' );\nexport const shiftRight = nodeProxy( OperatorNode, '>>' );\n\naddNodeElement( 'add', add );\naddNodeElement( 'sub', sub );\naddNodeElement( 'mul', mul );\naddNodeElement( 'div', div );\naddNodeElement( 'remainder', remainder );\naddNodeElement( 'equal', equal );\naddNodeElement( 'assign', assign );\naddNodeElement( 'lessThan', lessThan );\naddNodeElement( 'greaterThan', greaterThan );\naddNodeElement( 'lessThanEqual', lessThanEqual );\naddNodeElement( 'greaterThanEqual', greaterThanEqual );\naddNodeElement( 'and', and );\naddNodeElement( 'or', or );\naddNodeElement( 'xor', xor );\naddNodeElement( 'bitAnd', bitAnd );\naddNodeElement( 'bitOr', bitOr );\naddNodeElement( 'bitXor', bitXor );\naddNodeElement( 'shiftLeft', shiftLeft );\naddNodeElement( 'shiftRight', shiftRight );\n\naddNodeClass( 'OperatorNode', OperatorNode );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}