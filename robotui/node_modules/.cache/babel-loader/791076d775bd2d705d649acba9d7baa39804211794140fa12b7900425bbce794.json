{"ast":null,"code":"import _classCallCheck from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport MaterialNode from './MaterialNode.js';\nimport { materialReference } from './MaterialReferenceNode.js';\nimport { normalView } from './NormalNode.js';\nimport { normalMap } from '../display/NormalMapNode.js';\nimport { bumpMap } from '../display/BumpMapNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { nodeImmutable } from '../shadernode/ShaderNode.js';\nvar ExtendedMaterialNode = /*#__PURE__*/function (_MaterialNode) {\n  _inherits(ExtendedMaterialNode, _MaterialNode);\n  var _super = _createSuper(ExtendedMaterialNode);\n  function ExtendedMaterialNode(scope) {\n    _classCallCheck(this, ExtendedMaterialNode);\n    return _super.call(this, scope);\n  }\n  _createClass(ExtendedMaterialNode, [{\n    key: \"getNodeType\",\n    value: function getNodeType(builder) {\n      var scope = this.scope;\n      var type = null;\n      if (scope === ExtendedMaterialNode.NORMAL || scope === ExtendedMaterialNode.CLEARCOAT_NORMAL) {\n        type = 'vec3';\n      }\n      return type || _get(_getPrototypeOf(ExtendedMaterialNode.prototype), \"getNodeType\", this).call(this, builder);\n    }\n  }, {\n    key: \"setup\",\n    value: function setup(builder) {\n      var material = builder.material;\n      var scope = this.scope;\n      var node = null;\n      if (scope === ExtendedMaterialNode.NORMAL) {\n        if (material.normalMap) {\n          node = normalMap(this.getTexture('normalMap'), materialReference('normalScale', 'vec2'));\n        } else if (material.bumpMap) {\n          // @TODO: Replace material.bumpMap to this.getTexture( 'bumpMap' )\n          node = bumpMap(material.bumpMap, materialReference('bumpScale', 'float'));\n        } else {\n          node = normalView;\n        }\n      } else if (scope === ExtendedMaterialNode.CLEARCOAT_NORMAL) {\n        node = material.clearcoatNormalMap ? normalMap(this.getTexture('clearcoatNormalMap'), materialReference('clearcoatNormalScale', 'vec2')) : normalView;\n      }\n      return node || _get(_getPrototypeOf(ExtendedMaterialNode.prototype), \"setup\", this).call(this, builder);\n    }\n  }]);\n  return ExtendedMaterialNode;\n}(MaterialNode);\nExtendedMaterialNode.NORMAL = 'normal';\nExtendedMaterialNode.CLEARCOAT_NORMAL = 'clearcoatNormal';\nexport default ExtendedMaterialNode;\nexport var materialNormal = nodeImmutable(ExtendedMaterialNode, ExtendedMaterialNode.NORMAL);\nexport var materialClearcoatNormal = nodeImmutable(ExtendedMaterialNode, ExtendedMaterialNode.CLEARCOAT_NORMAL);\naddNodeClass('ExtendedMaterialNode', ExtendedMaterialNode);","map":{"version":3,"names":["MaterialNode","materialReference","normalView","normalMap","bumpMap","addNodeClass","nodeImmutable","ExtendedMaterialNode","_MaterialNode","_inherits","_super","_createSuper","scope","_classCallCheck","call","_createClass","key","value","getNodeType","builder","type","NORMAL","CLEARCOAT_NORMAL","_get","_getPrototypeOf","prototype","setup","material","node","getTexture","clearcoatNormalMap","materialNormal","materialClearcoatNormal"],"sources":["/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/three/examples/jsm/nodes/accessors/ExtendedMaterialNode.js"],"sourcesContent":["import MaterialNode from './MaterialNode.js';\nimport { materialReference } from './MaterialReferenceNode.js';\nimport { normalView } from './NormalNode.js';\nimport { normalMap } from '../display/NormalMapNode.js';\nimport { bumpMap } from '../display/BumpMapNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { nodeImmutable } from '../shadernode/ShaderNode.js';\n\nclass ExtendedMaterialNode extends MaterialNode {\n\n\tconstructor( scope ) {\n\n\t\tsuper( scope );\n\n\t}\n\n\tgetNodeType( builder ) {\n\n\t\tconst scope = this.scope;\n\t\tlet type = null;\n\n\t\tif ( scope === ExtendedMaterialNode.NORMAL || scope === ExtendedMaterialNode.CLEARCOAT_NORMAL ) {\n\n\t\t\ttype = 'vec3';\n\n\t\t}\n\n\t\treturn type || super.getNodeType( builder );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst material = builder.material;\n\t\tconst scope = this.scope;\n\n\t\tlet node = null;\n\n\t\tif ( scope === ExtendedMaterialNode.NORMAL ) {\n\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tnode = normalMap( this.getTexture( 'normalMap' ), materialReference( 'normalScale', 'vec2' ) );\n\n\t\t\t} else if ( material.bumpMap ) {\n\n\t\t\t\t// @TODO: Replace material.bumpMap to this.getTexture( 'bumpMap' )\n\t\t\t\tnode = bumpMap( material.bumpMap, materialReference( 'bumpScale', 'float' ) );\n\n\t\t\t} else {\n\n\t\t\t\tnode = normalView;\n\n\t\t\t}\n\n\t\t} else if ( scope === ExtendedMaterialNode.CLEARCOAT_NORMAL ) {\n\n\t\t\tnode = material.clearcoatNormalMap ? normalMap( this.getTexture( 'clearcoatNormalMap' ), materialReference( 'clearcoatNormalScale', 'vec2' ) ) : normalView;\n\n\t\t}\n\n\t\treturn node || super.setup( builder );\n\n\t}\n\n}\n\nExtendedMaterialNode.NORMAL = 'normal';\nExtendedMaterialNode.CLEARCOAT_NORMAL = 'clearcoatNormal';\n\nexport default ExtendedMaterialNode;\n\nexport const materialNormal = nodeImmutable( ExtendedMaterialNode, ExtendedMaterialNode.NORMAL );\nexport const materialClearcoatNormal = nodeImmutable( ExtendedMaterialNode, ExtendedMaterialNode.CLEARCOAT_NORMAL );\n\naddNodeClass( 'ExtendedMaterialNode', ExtendedMaterialNode );\n"],"mappings":";;;;;;AAAA,OAAOA,YAAY,MAAM,mBAAmB;AAC5C,SAASC,iBAAiB,QAAQ,4BAA4B;AAC9D,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,SAAS,QAAQ,6BAA6B;AACvD,SAASC,OAAO,QAAQ,2BAA2B;AACnD,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,aAAa,QAAQ,6BAA6B;AAAC,IAEtDC,oBAAoB,0BAAAC,aAAA;EAAAC,SAAA,CAAAF,oBAAA,EAAAC,aAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,oBAAA;EAEzB,SAAAA,qBAAaK,KAAK,EAAG;IAAAC,eAAA,OAAAN,oBAAA;IAAA,OAAAG,MAAA,CAAAI,IAAA,OAEbF,KAAK;EAEb;EAACG,YAAA,CAAAR,oBAAA;IAAAS,GAAA;IAAAC,KAAA,EAED,SAAAC,YAAaC,OAAO,EAAG;MAEtB,IAAMP,KAAK,GAAG,IAAI,CAACA,KAAK;MACxB,IAAIQ,IAAI,GAAG,IAAI;MAEf,IAAKR,KAAK,KAAKL,oBAAoB,CAACc,MAAM,IAAIT,KAAK,KAAKL,oBAAoB,CAACe,gBAAgB,EAAG;QAE/FF,IAAI,GAAG,MAAM;MAEd;MAEA,OAAOA,IAAI,IAAAG,IAAA,CAAAC,eAAA,CAAAjB,oBAAA,CAAAkB,SAAA,wBAAAX,IAAA,OAAuBK,OAAO,CAAE;IAE5C;EAAC;IAAAH,GAAA;IAAAC,KAAA,EAED,SAAAS,MAAOP,OAAO,EAAG;MAEhB,IAAMQ,QAAQ,GAAGR,OAAO,CAACQ,QAAQ;MACjC,IAAMf,KAAK,GAAG,IAAI,CAACA,KAAK;MAExB,IAAIgB,IAAI,GAAG,IAAI;MAEf,IAAKhB,KAAK,KAAKL,oBAAoB,CAACc,MAAM,EAAG;QAE5C,IAAKM,QAAQ,CAACxB,SAAS,EAAG;UAEzByB,IAAI,GAAGzB,SAAS,CAAE,IAAI,CAAC0B,UAAU,CAAE,WAAY,CAAC,EAAE5B,iBAAiB,CAAE,aAAa,EAAE,MAAO,CAAE,CAAC;QAE/F,CAAC,MAAM,IAAK0B,QAAQ,CAACvB,OAAO,EAAG;UAE9B;UACAwB,IAAI,GAAGxB,OAAO,CAAEuB,QAAQ,CAACvB,OAAO,EAAEH,iBAAiB,CAAE,WAAW,EAAE,OAAQ,CAAE,CAAC;QAE9E,CAAC,MAAM;UAEN2B,IAAI,GAAG1B,UAAU;QAElB;MAED,CAAC,MAAM,IAAKU,KAAK,KAAKL,oBAAoB,CAACe,gBAAgB,EAAG;QAE7DM,IAAI,GAAGD,QAAQ,CAACG,kBAAkB,GAAG3B,SAAS,CAAE,IAAI,CAAC0B,UAAU,CAAE,oBAAqB,CAAC,EAAE5B,iBAAiB,CAAE,sBAAsB,EAAE,MAAO,CAAE,CAAC,GAAGC,UAAU;MAE5J;MAEA,OAAO0B,IAAI,IAAAL,IAAA,CAAAC,eAAA,CAAAjB,oBAAA,CAAAkB,SAAA,kBAAAX,IAAA,OAAiBK,OAAO,CAAE;IAEtC;EAAC;EAAA,OAAAZ,oBAAA;AAAA,EAvDiCP,YAAY;AA2D/CO,oBAAoB,CAACc,MAAM,GAAG,QAAQ;AACtCd,oBAAoB,CAACe,gBAAgB,GAAG,iBAAiB;AAEzD,eAAef,oBAAoB;AAEnC,OAAO,IAAMwB,cAAc,GAAGzB,aAAa,CAAEC,oBAAoB,EAAEA,oBAAoB,CAACc,MAAO,CAAC;AAChG,OAAO,IAAMW,uBAAuB,GAAG1B,aAAa,CAAEC,oBAAoB,EAAEA,oBAAoB,CAACe,gBAAiB,CAAC;AAEnHjB,YAAY,CAAE,sBAAsB,EAAEE,oBAAqB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}