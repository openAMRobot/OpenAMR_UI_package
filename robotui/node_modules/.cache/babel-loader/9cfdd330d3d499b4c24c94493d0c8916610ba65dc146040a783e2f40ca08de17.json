{"ast":null,"code":"import _classCallCheck from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport Node, { addNodeClass } from '../core/Node.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { addNodeElement, nodeObject } from '../shadernode/ShaderNode.js';\nvar ComputeNode = /*#__PURE__*/function (_Node) {\n  _inherits(ComputeNode, _Node);\n  var _super = _createSuper(ComputeNode);\n  function ComputeNode(computeNode, count) {\n    var _this;\n    var workgroupSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [64];\n    _classCallCheck(this, ComputeNode);\n    _this = _super.call(this, 'void');\n    _this.isComputeNode = true;\n    _this.computeNode = computeNode;\n    _this.count = count;\n    _this.workgroupSize = workgroupSize;\n    _this.dispatchCount = 0;\n    _this.version = 1;\n    _this.updateType = NodeUpdateType.OBJECT;\n    _this.updateDispatchCount();\n    return _this;\n  }\n  _createClass(ComputeNode, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this.dispatchEvent({\n        type: 'dispose'\n      });\n    }\n  }, {\n    key: \"needsUpdate\",\n    set: function set(value) {\n      if (value === true) this.version++;\n    }\n  }, {\n    key: \"updateDispatchCount\",\n    value: function updateDispatchCount() {\n      var count = this.count,\n        workgroupSize = this.workgroupSize;\n      var size = workgroupSize[0];\n      for (var i = 1; i < workgroupSize.length; i++) size *= workgroupSize[i];\n      this.dispatchCount = Math.ceil(count / size);\n    }\n  }, {\n    key: \"onInit\",\n    value: function onInit() {}\n  }, {\n    key: \"update\",\n    value: function update(_ref) {\n      var renderer = _ref.renderer;\n      renderer.compute(this);\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(builder) {\n      var shaderStage = builder.shaderStage;\n      if (shaderStage === 'compute') {\n        var snippet = this.computeNode.build(builder, 'void');\n        if (snippet !== '') {\n          builder.addLineFlowCode(snippet);\n        }\n      }\n    }\n  }]);\n  return ComputeNode;\n}(Node);\nexport default ComputeNode;\nexport var compute = function compute(node, count, workgroupSize) {\n  return nodeObject(new ComputeNode(nodeObject(node), count, workgroupSize));\n};\naddNodeElement('compute', compute);\naddNodeClass('ComputeNode', ComputeNode);","map":{"version":3,"names":["Node","addNodeClass","NodeUpdateType","addNodeElement","nodeObject","ComputeNode","_Node","_inherits","_super","_createSuper","computeNode","count","_this","workgroupSize","arguments","length","undefined","_classCallCheck","call","isComputeNode","dispatchCount","version","updateType","OBJECT","updateDispatchCount","_createClass","key","value","dispose","dispatchEvent","type","set","size","i","Math","ceil","onInit","update","_ref","renderer","compute","generate","builder","shaderStage","snippet","build","addLineFlowCode","node"],"sources":["/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/three/examples/jsm/nodes/gpgpu/ComputeNode.js"],"sourcesContent":["import Node, { addNodeClass } from '../core/Node.js';\nimport { NodeUpdateType } from '../core/constants.js';\nimport { addNodeElement, nodeObject } from '../shadernode/ShaderNode.js';\n\nclass ComputeNode extends Node {\n\n\tconstructor( computeNode, count, workgroupSize = [ 64 ] ) {\n\n\t\tsuper( 'void' );\n\n\t\tthis.isComputeNode = true;\n\n\t\tthis.computeNode = computeNode;\n\n\t\tthis.count = count;\n\t\tthis.workgroupSize = workgroupSize;\n\t\tthis.dispatchCount = 0;\n\n\t\tthis.version = 1;\n\t\tthis.updateType = NodeUpdateType.OBJECT;\n\n\t\tthis.updateDispatchCount();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\tupdateDispatchCount() {\n\n\t\tconst { count, workgroupSize } = this;\n\n\t\tlet size = workgroupSize[ 0 ];\n\n\t\tfor ( let i = 1; i < workgroupSize.length; i ++ )\n\t\t\tsize *= workgroupSize[ i ];\n\n\t\tthis.dispatchCount = Math.ceil( count / size );\n\n\t}\n\n\tonInit() { }\n\n\tupdate( { renderer } ) {\n\n\t\trenderer.compute( this );\n\n\t}\n\n\tgenerate( builder ) {\n\n\t\tconst { shaderStage } = builder;\n\n\t\tif ( shaderStage === 'compute' ) {\n\n\t\t\tconst snippet = this.computeNode.build( builder, 'void' );\n\n\t\t\tif ( snippet !== '' ) {\n\n\t\t\t\tbuilder.addLineFlowCode( snippet );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nexport default ComputeNode;\n\nexport const compute = ( node, count, workgroupSize ) => nodeObject( new ComputeNode( nodeObject( node ), count, workgroupSize ) );\n\naddNodeElement( 'compute', compute );\n\naddNodeClass( 'ComputeNode', ComputeNode );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}