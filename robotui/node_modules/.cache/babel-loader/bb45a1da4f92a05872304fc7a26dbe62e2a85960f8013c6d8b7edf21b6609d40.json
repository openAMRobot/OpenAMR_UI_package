{"ast":null,"code":"import _slicedToArray from\"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";/* eslint-disable no-unused-vars */import React,{useState,useEffect}from\"react\";import{CircularProgressbar}from\"react-circular-progressbar\";import\"react-circular-progressbar/dist/styles.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var CircularProgressBar=function CircularProgressBar(_ref){var sensorsData=_ref.sensorsData,sensorName=_ref.sensorName,color=_ref.color,text=_ref.text,units=_ref.units,minValue=_ref.minValue,maxValue=_ref.maxValue;var _useState=useState(\"-\"),_useState2=_slicedToArray(_useState,2),sensorData=_useState2[0],setSensorsData=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),percentage=_useState4[0],setPercentage=_useState4[1];/**\n   * CircularProgressbar prints only true values as text-props.\n   * That is why 0 value passed as '0'.\n   */useEffect(function(){var sensorValue=extractSensorValue(sensorsData,sensorName);if(sensorValue===0){setSensorsData(\"0\");}else if(sensorValue){setSensorsData(sensorValue);}else return;if(isNaN(parseFloat(minValue))||isNaN(parseFloat(maxValue))){console.error(\"Min or max value is NaN\");setPercentage(0);return;}var percents=(sensorValue-minValue)/(maxValue-minValue)*100;if(percents>=100){setPercentage(100);}else if(percents<=0){setPercentage(0);}else{setPercentage(percents);}},[maxValue,minValue,sensorName,sensorsData,units]);var extractSensorValue=function extractSensorValue(sensorsData,sensorName){var parts=sensorsData.split(\"_\");if(parts.length===2&&parts[0]===sensorName){var sensorValue=parseFloat(parts[1]);if(!isNaN(sensorValue)){return sensorValue;}}};return/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col items-center justify-between gap-3 font-[RobotoMono]\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-center text-lg text-themeBlue\",children:text}),/*#__PURE__*/_jsx(\"div\",{className:\"max-h-[150px] max-w-[150px]\",children:/*#__PURE__*/_jsx(CircularProgressbar,{value:percentage,text:sensorData,strokeWidth:\"9\",styles:{path:{stroke:color,transition:\"stroke-dashoffset 0.5s ease 0s\"},text:{fill:\"#22b7fc\",fontSize:\"16px\",display:\"flex\",flexDirection:\"column\",flexWrap:\"wrap\"}}})})]});};export default CircularProgressBar;","map":{"version":3,"names":["React","useState","useEffect","CircularProgressbar","jsx","_jsx","jsxs","_jsxs","CircularProgressBar","_ref","sensorsData","sensorName","color","text","units","minValue","maxValue","_useState","_useState2","_slicedToArray","sensorData","setSensorsData","_useState3","_useState4","percentage","setPercentage","sensorValue","extractSensorValue","isNaN","parseFloat","console","error","percents","parts","split","length","className","children","value","strokeWidth","styles","path","stroke","transition","fill","fontSize","display","flexDirection","flexWrap"],"sources":["/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/src/components/CircularProgressBar.jsx"],"sourcesContent":["/* eslint-disable no-unused-vars */\nimport React, { useState, useEffect } from \"react\";\nimport { CircularProgressbar } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\n\nconst CircularProgressBar = ({\n  sensorsData,\n  sensorName,\n  color,\n  text,\n  units,\n  minValue,\n  maxValue,\n}) => {\n  const [sensorData, setSensorsData] = useState(\"-\");\n  const [percentage, setPercentage] = useState(0);\n\n  /**\n   * CircularProgressbar prints only true values as text-props.\n   * That is why 0 value passed as '0'.\n   */\n  useEffect(() => {\n    let sensorValue = extractSensorValue(sensorsData, sensorName);\n\n    if (sensorValue === 0) {\n      setSensorsData(\"0\");\n    } else if (sensorValue) {\n      setSensorsData(sensorValue);\n    } else return;\n\n    if (isNaN(parseFloat(minValue)) || isNaN(parseFloat(maxValue))) {\n      console.error(\"Min or max value is NaN\");\n      setPercentage(0);\n      return;\n    }\n\n    const percents = ((sensorValue - minValue) / (maxValue - minValue)) * 100;\n    if (percents >= 100) {\n      setPercentage(100);\n    } else if (percents <= 0) {\n      setPercentage(0);\n    } else {\n      setPercentage(percents);\n    }\n  }, [maxValue, minValue, sensorName, sensorsData, units]);\n\n  const extractSensorValue = (sensorsData, sensorName) => {\n    const parts = sensorsData.split(\"_\");\n    if (parts.length === 2 && parts[0] === sensorName) {\n      const sensorValue = parseFloat(parts[1]);\n      if (!isNaN(sensorValue)) {\n        return sensorValue;\n      }\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col items-center justify-between gap-3 font-[RobotoMono]\">\n      <h3 className=\"text-center text-lg text-themeBlue\">{text}</h3>\n      <div className=\"max-h-[150px] max-w-[150px]\">\n        <CircularProgressbar\n          value={percentage}\n          text={sensorData}\n          strokeWidth=\"9\"\n          styles={{\n            path: {\n              stroke: color,\n              transition: \"stroke-dashoffset 0.5s ease 0s\",\n            },\n            text: {\n              fill: \"#22b7fc\",\n              fontSize: \"16px\",\n              display: \"flex\",\n              flexDirection: \"column\",\n              flexWrap: \"wrap\",\n            },\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default CircularProgressBar;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}