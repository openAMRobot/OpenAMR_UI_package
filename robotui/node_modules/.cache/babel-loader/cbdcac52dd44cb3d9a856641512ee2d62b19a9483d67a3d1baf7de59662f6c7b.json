{"ast":null,"code":"import _classCallCheck from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport Node, { addNodeClass } from '../core/Node.js';\nimport { reference } from './ReferenceNode.js';\nimport { materialReference } from './MaterialReferenceNode.js';\nimport { nodeImmutable, float } from '../shadernode/ShaderNode.js';\nvar _propertyCache = new Map();\nvar MaterialNode = /*#__PURE__*/function (_Node) {\n  _inherits(MaterialNode, _Node);\n  var _super = _createSuper(MaterialNode);\n  function MaterialNode(scope) {\n    var _this;\n    _classCallCheck(this, MaterialNode);\n    _this = _super.call(this);\n    _this.scope = scope;\n    return _this;\n  }\n  _createClass(MaterialNode, [{\n    key: \"getCache\",\n    value: function getCache(property, type) {\n      var node = _propertyCache.get(property);\n      if (node === undefined) {\n        node = materialReference(property, type);\n        _propertyCache.set(property, node);\n      }\n      return node;\n    }\n  }, {\n    key: \"getFloat\",\n    value: function getFloat(property) {\n      return this.getCache(property, 'float');\n    }\n  }, {\n    key: \"getColor\",\n    value: function getColor(property) {\n      return this.getCache(property, 'color');\n    }\n  }, {\n    key: \"getTexture\",\n    value: function getTexture(property) {\n      return this.getCache(property, 'texture');\n    }\n  }, {\n    key: \"setup\",\n    value: function setup(builder) {\n      var material = builder.context.material;\n      var scope = this.scope;\n      var node = null;\n      if (scope === MaterialNode.ALPHA_TEST || scope === MaterialNode.SHININESS || scope === MaterialNode.REFLECTIVITY || scope === MaterialNode.ROTATION || scope === MaterialNode.IRIDESCENCE || scope === MaterialNode.IRIDESCENCE_IOR) {\n        node = this.getFloat(scope);\n      } else if (scope === MaterialNode.SPECULAR_COLOR) {\n        node = this.getColor('specular');\n      } else if (scope === MaterialNode.COLOR) {\n        var colorNode = this.getColor('color');\n        if (material.map && material.map.isTexture === true) {\n          node = colorNode.mul(this.getTexture('map'));\n        } else {\n          node = colorNode;\n        }\n      } else if (scope === MaterialNode.OPACITY) {\n        var opacityNode = this.getFloat('opacity');\n        if (material.alphaMap && material.alphaMap.isTexture === true) {\n          node = opacityNode.mul(this.getTexture('alphaMap'));\n        } else {\n          node = opacityNode;\n        }\n      } else if (scope === MaterialNode.SPECULAR_STRENGTH) {\n        if (material.specularMap && material.specularMap.isTexture === true) {\n          node = this.getTexture('specularMap').r;\n        } else {\n          node = float(1);\n        }\n      } else if (scope === MaterialNode.ROUGHNESS) {\n        var roughnessNode = this.getFloat('roughness');\n        if (material.roughnessMap && material.roughnessMap.isTexture === true) {\n          node = roughnessNode.mul(this.getTexture('roughnessMap').g);\n        } else {\n          node = roughnessNode;\n        }\n      } else if (scope === MaterialNode.METALNESS) {\n        var metalnessNode = this.getFloat('metalness');\n        if (material.metalnessMap && material.metalnessMap.isTexture === true) {\n          node = metalnessNode.mul(this.getTexture('metalnessMap').b);\n        } else {\n          node = metalnessNode;\n        }\n      } else if (scope === MaterialNode.EMISSIVE) {\n        var emissiveNode = this.getColor('emissive');\n        if (material.emissiveMap && material.emissiveMap.isTexture === true) {\n          node = emissiveNode.mul(this.getTexture('emissiveMap'));\n        } else {\n          node = emissiveNode;\n        }\n      } else if (scope === MaterialNode.CLEARCOAT) {\n        var clearcoatNode = this.getFloat('clearcoat');\n        if (material.clearcoatMap && material.clearcoatMap.isTexture === true) {\n          node = clearcoatNode.mul(this.getTexture('clearcoatMap').r);\n        } else {\n          node = clearcoatNode;\n        }\n      } else if (scope === MaterialNode.CLEARCOAT_ROUGHNESS) {\n        var clearcoatRoughnessNode = this.getFloat('clearcoatRoughness');\n        if (material.clearcoatRoughnessMap && material.clearcoatRoughnessMap.isTexture === true) {\n          node = clearcoatRoughnessNode.mul(this.getTexture('clearcoatRoughnessMap').r);\n        } else {\n          node = clearcoatRoughnessNode;\n        }\n      } else if (scope === MaterialNode.SHEEN) {\n        var sheenNode = this.getColor('sheenColor').mul(this.getFloat('sheen')); // Move this mul() to CPU\n\n        if (material.sheenColorMap && material.sheenColorMap.isTexture === true) {\n          node = sheenNode.mul(this.getTexture('sheenColorMap').rgb);\n        } else {\n          node = sheenNode;\n        }\n      } else if (scope === MaterialNode.SHEEN_ROUGHNESS) {\n        var sheenRoughnessNode = this.getFloat('sheenRoughness');\n        if (material.sheenRoughnessMap && material.sheenRoughnessMap.isTexture === true) {\n          node = sheenRoughnessNode.mul(this.getTexture('sheenRoughnessMap').a);\n        } else {\n          node = sheenRoughnessNode;\n        }\n        node = node.clamp(0.07, 1.0);\n      } else if (scope === MaterialNode.IRIDESCENCE_THICKNESS) {\n        var iridescenceThicknessMaximum = reference(1, 'float', material.iridescenceThicknessRange);\n        if (material.iridescenceThicknessMap) {\n          var iridescenceThicknessMinimum = reference(0, 'float', material.iridescenceThicknessRange);\n          node = iridescenceThicknessMaximum.sub(iridescenceThicknessMinimum).mul(this.getTexture('iridescenceThicknessMap').g).add(iridescenceThicknessMinimum);\n        } else {\n          node = iridescenceThicknessMaximum;\n        }\n      } else {\n        var outputType = this.getNodeType(builder);\n        node = materialReference(scope, outputType);\n      }\n      return node;\n    }\n  }]);\n  return MaterialNode;\n}(Node);\nMaterialNode.ALPHA_TEST = 'alphaTest';\nMaterialNode.COLOR = 'color';\nMaterialNode.OPACITY = 'opacity';\nMaterialNode.SHININESS = 'shininess';\nMaterialNode.SPECULAR = 'specular';\nMaterialNode.SPECULAR_STRENGTH = 'specularStrength';\nMaterialNode.REFLECTIVITY = 'reflectivity';\nMaterialNode.ROUGHNESS = 'roughness';\nMaterialNode.METALNESS = 'metalness';\nMaterialNode.CLEARCOAT = 'clearcoat';\nMaterialNode.CLEARCOAT_ROUGHNESS = 'clearcoatRoughness';\nMaterialNode.EMISSIVE = 'emissive';\nMaterialNode.ROTATION = 'rotation';\nMaterialNode.SHEEN = 'sheen';\nMaterialNode.SHEEN_ROUGHNESS = 'sheenRoughness';\nMaterialNode.IRIDESCENCE = 'iridescence';\nMaterialNode.IRIDESCENCE_IOR = 'iridescenceIOR';\nMaterialNode.IRIDESCENCE_THICKNESS = 'iridescenceThickness';\nexport default MaterialNode;\nexport var materialAlphaTest = nodeImmutable(MaterialNode, MaterialNode.ALPHA_TEST);\nexport var materialColor = nodeImmutable(MaterialNode, MaterialNode.COLOR);\nexport var materialShininess = nodeImmutable(MaterialNode, MaterialNode.SHININESS);\nexport var materialEmissive = nodeImmutable(MaterialNode, MaterialNode.EMISSIVE);\nexport var materialOpacity = nodeImmutable(MaterialNode, MaterialNode.OPACITY);\nexport var materialSpecularColor = nodeImmutable(MaterialNode, MaterialNode.SPECULAR_COLOR);\nexport var materialSpecularStrength = nodeImmutable(MaterialNode, MaterialNode.SPECULAR_STRENGTH);\nexport var materialReflectivity = nodeImmutable(MaterialNode, MaterialNode.REFLECTIVITY);\nexport var materialRoughness = nodeImmutable(MaterialNode, MaterialNode.ROUGHNESS);\nexport var materialMetalness = nodeImmutable(MaterialNode, MaterialNode.METALNESS);\nexport var materialClearcoat = nodeImmutable(MaterialNode, MaterialNode.CLEARCOAT);\nexport var materialClearcoatRoughness = nodeImmutable(MaterialNode, MaterialNode.CLEARCOAT_ROUGHNESS);\nexport var materialRotation = nodeImmutable(MaterialNode, MaterialNode.ROTATION);\nexport var materialSheen = nodeImmutable(MaterialNode, MaterialNode.SHEEN);\nexport var materialSheenRoughness = nodeImmutable(MaterialNode, MaterialNode.SHEEN_ROUGHNESS);\nexport var materialIridescence = nodeImmutable(MaterialNode, MaterialNode.IRIDESCENCE);\nexport var materialIridescenceIOR = nodeImmutable(MaterialNode, MaterialNode.IRIDESCENCE_IOR);\nexport var materialIridescenceThickness = nodeImmutable(MaterialNode, MaterialNode.IRIDESCENCE_THICKNESS);\naddNodeClass('MaterialNode', MaterialNode);","map":{"version":3,"names":["Node","addNodeClass","reference","materialReference","nodeImmutable","float","_propertyCache","Map","MaterialNode","_Node","_inherits","_super","_createSuper","scope","_this","_classCallCheck","call","_createClass","key","value","getCache","property","type","node","get","undefined","set","getFloat","getColor","getTexture","setup","builder","material","context","ALPHA_TEST","SHININESS","REFLECTIVITY","ROTATION","IRIDESCENCE","IRIDESCENCE_IOR","SPECULAR_COLOR","COLOR","colorNode","map","isTexture","mul","OPACITY","opacityNode","alphaMap","SPECULAR_STRENGTH","specularMap","r","ROUGHNESS","roughnessNode","roughnessMap","g","METALNESS","metalnessNode","metalnessMap","b","EMISSIVE","emissiveNode","emissiveMap","CLEARCOAT","clearcoatNode","clearcoatMap","CLEARCOAT_ROUGHNESS","clearcoatRoughnessNode","clearcoatRoughnessMap","SHEEN","sheenNode","sheenColorMap","rgb","SHEEN_ROUGHNESS","sheenRoughnessNode","sheenRoughnessMap","a","clamp","IRIDESCENCE_THICKNESS","iridescenceThicknessMaximum","iridescenceThicknessRange","iridescenceThicknessMap","iridescenceThicknessMinimum","sub","add","outputType","getNodeType","SPECULAR","materialAlphaTest","materialColor","materialShininess","materialEmissive","materialOpacity","materialSpecularColor","materialSpecularStrength","materialReflectivity","materialRoughness","materialMetalness","materialClearcoat","materialClearcoatRoughness","materialRotation","materialSheen","materialSheenRoughness","materialIridescence","materialIridescenceIOR","materialIridescenceThickness"],"sources":["/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/three/examples/jsm/nodes/accessors/MaterialNode.js"],"sourcesContent":["import Node, { addNodeClass } from '../core/Node.js';\nimport { reference } from './ReferenceNode.js';\nimport { materialReference } from './MaterialReferenceNode.js';\nimport { nodeImmutable, float } from '../shadernode/ShaderNode.js';\n\nconst _propertyCache = new Map();\n\nclass MaterialNode extends Node {\n\n\tconstructor( scope ) {\n\n\t\tsuper();\n\n\t\tthis.scope = scope;\n\n\t}\n\n\tgetCache( property, type ) {\n\n\t\tlet node = _propertyCache.get( property );\n\n\t\tif ( node === undefined ) {\n\n\t\t\tnode = materialReference( property, type );\n\n\t\t\t_propertyCache.set( property, node );\n\n\t\t}\n\n\t\treturn node;\n\n\t}\n\n\tgetFloat( property ) {\n\n\t\treturn this.getCache( property, 'float' );\n\n\t}\n\n\tgetColor( property ) {\n\n\t\treturn this.getCache( property, 'color' );\n\n\t}\n\n\tgetTexture( property ) {\n\n\t\treturn this.getCache( property, 'texture' );\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst material = builder.context.material;\n\t\tconst scope = this.scope;\n\n\t\tlet node = null;\n\n\t\tif ( scope === MaterialNode.ALPHA_TEST || scope === MaterialNode.SHININESS || scope === MaterialNode.REFLECTIVITY || scope === MaterialNode.ROTATION || scope === MaterialNode.IRIDESCENCE || scope === MaterialNode.IRIDESCENCE_IOR ) {\n\n\t\t\tnode = this.getFloat( scope );\n\n\t\t} else if ( scope === MaterialNode.SPECULAR_COLOR ) {\n\n\t\t\tnode = this.getColor( 'specular' );\n\n\t\t} else if ( scope === MaterialNode.COLOR ) {\n\n\t\t\tconst colorNode = this.getColor( 'color' );\n\n\t\t\tif ( material.map && material.map.isTexture === true ) {\n\n\t\t\t\tnode = colorNode.mul( this.getTexture( 'map' ) );\n\n\t\t\t} else {\n\n\t\t\t\tnode = colorNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.OPACITY ) {\n\n\t\t\tconst opacityNode = this.getFloat( 'opacity' );\n\n\t\t\tif ( material.alphaMap && material.alphaMap.isTexture === true ) {\n\n\t\t\t\tnode = opacityNode.mul( this.getTexture( 'alphaMap' ) );\n\n\t\t\t} else {\n\n\t\t\t\tnode = opacityNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.SPECULAR_STRENGTH ) {\n\n\t\t\tif ( material.specularMap && material.specularMap.isTexture === true ) {\n\n\t\t\t\tnode = this.getTexture( 'specularMap' ).r;\n\n\t\t\t} else {\n\n\t\t\t\tnode = float( 1 );\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.ROUGHNESS ) {\n\n\t\t\tconst roughnessNode = this.getFloat( 'roughness' );\n\n\t\t\tif ( material.roughnessMap && material.roughnessMap.isTexture === true ) {\n\n\t\t\t\tnode = roughnessNode.mul( this.getTexture( 'roughnessMap' ).g );\n\n\t\t\t} else {\n\n\t\t\t\tnode = roughnessNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.METALNESS ) {\n\n\t\t\tconst metalnessNode = this.getFloat( 'metalness' );\n\n\t\t\tif ( material.metalnessMap && material.metalnessMap.isTexture === true ) {\n\n\t\t\t\tnode = metalnessNode.mul( this.getTexture( 'metalnessMap' ).b );\n\n\t\t\t} else {\n\n\t\t\t\tnode = metalnessNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.EMISSIVE ) {\n\n\t\t\tconst emissiveNode = this.getColor( 'emissive' );\n\n\t\t\tif ( material.emissiveMap && material.emissiveMap.isTexture === true ) {\n\n\t\t\t\tnode = emissiveNode.mul( this.getTexture( 'emissiveMap' ) );\n\n\t\t\t} else {\n\n\t\t\t\tnode = emissiveNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.CLEARCOAT ) {\n\n\t\t\tconst clearcoatNode = this.getFloat( 'clearcoat' );\n\n\t\t\tif ( material.clearcoatMap && material.clearcoatMap.isTexture === true ) {\n\n\t\t\t\tnode = clearcoatNode.mul( this.getTexture( 'clearcoatMap' ).r );\n\n\t\t\t} else {\n\n\t\t\t\tnode = clearcoatNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.CLEARCOAT_ROUGHNESS ) {\n\n\t\t\tconst clearcoatRoughnessNode = this.getFloat( 'clearcoatRoughness' );\n\n\t\t\tif ( material.clearcoatRoughnessMap && material.clearcoatRoughnessMap.isTexture === true ) {\n\n\t\t\t\tnode = clearcoatRoughnessNode.mul( this.getTexture( 'clearcoatRoughnessMap' ).r );\n\n\t\t\t} else {\n\n\t\t\t\tnode = clearcoatRoughnessNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.SHEEN ) {\n\n\t\t\tconst sheenNode = this.getColor( 'sheenColor' ).mul( this.getFloat( 'sheen' ) ); // Move this mul() to CPU\n\n\t\t\tif ( material.sheenColorMap && material.sheenColorMap.isTexture === true ) {\n\n\t\t\t\tnode = sheenNode.mul( this.getTexture( 'sheenColorMap' ).rgb );\n\n\t\t\t} else {\n\n\t\t\t\tnode = sheenNode;\n\n\t\t\t}\n\n\t\t} else if ( scope === MaterialNode.SHEEN_ROUGHNESS ) {\n\n\t\t\tconst sheenRoughnessNode = this.getFloat( 'sheenRoughness' );\n\n\t\t\tif ( material.sheenRoughnessMap && material.sheenRoughnessMap.isTexture === true ) {\n\n\t\t\t\tnode = sheenRoughnessNode.mul( this.getTexture( 'sheenRoughnessMap' ).a );\n\n\t\t\t} else {\n\n\t\t\t\tnode = sheenRoughnessNode;\n\n\t\t\t}\n\n\t\t\tnode = node.clamp( 0.07, 1.0 );\n\n\t\t} else if ( scope === MaterialNode.IRIDESCENCE_THICKNESS ) {\n\n\t\t\tconst iridescenceThicknessMaximum = reference( 1, 'float', material.iridescenceThicknessRange );\n\n\t\t\tif ( material.iridescenceThicknessMap ) {\n\n\t\t\t\tconst iridescenceThicknessMinimum = reference( 0, 'float', material.iridescenceThicknessRange );\n\n\t\t\t\tnode = iridescenceThicknessMaximum.sub( iridescenceThicknessMinimum ).mul( this.getTexture( 'iridescenceThicknessMap' ).g ).add( iridescenceThicknessMinimum );\n\n\t\t\t} else {\n\n\t\t\t\tnode = iridescenceThicknessMaximum;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst outputType = this.getNodeType( builder );\n\n\t\t\tnode = materialReference( scope, outputType );\n\n\t\t}\n\n\t\treturn node;\n\n\t}\n\n}\n\nMaterialNode.ALPHA_TEST = 'alphaTest';\nMaterialNode.COLOR = 'color';\nMaterialNode.OPACITY = 'opacity';\nMaterialNode.SHININESS = 'shininess';\nMaterialNode.SPECULAR = 'specular';\nMaterialNode.SPECULAR_STRENGTH = 'specularStrength';\nMaterialNode.REFLECTIVITY = 'reflectivity';\nMaterialNode.ROUGHNESS = 'roughness';\nMaterialNode.METALNESS = 'metalness';\nMaterialNode.CLEARCOAT = 'clearcoat';\nMaterialNode.CLEARCOAT_ROUGHNESS = 'clearcoatRoughness';\nMaterialNode.EMISSIVE = 'emissive';\nMaterialNode.ROTATION = 'rotation';\nMaterialNode.SHEEN = 'sheen';\nMaterialNode.SHEEN_ROUGHNESS = 'sheenRoughness';\nMaterialNode.IRIDESCENCE = 'iridescence';\nMaterialNode.IRIDESCENCE_IOR = 'iridescenceIOR';\nMaterialNode.IRIDESCENCE_THICKNESS = 'iridescenceThickness';\n\nexport default MaterialNode;\n\nexport const materialAlphaTest = nodeImmutable( MaterialNode, MaterialNode.ALPHA_TEST );\nexport const materialColor = nodeImmutable( MaterialNode, MaterialNode.COLOR );\nexport const materialShininess = nodeImmutable( MaterialNode, MaterialNode.SHININESS );\nexport const materialEmissive = nodeImmutable( MaterialNode, MaterialNode.EMISSIVE );\nexport const materialOpacity = nodeImmutable( MaterialNode, MaterialNode.OPACITY );\nexport const materialSpecularColor = nodeImmutable( MaterialNode, MaterialNode.SPECULAR_COLOR );\nexport const materialSpecularStrength = nodeImmutable( MaterialNode, MaterialNode.SPECULAR_STRENGTH );\nexport const materialReflectivity = nodeImmutable( MaterialNode, MaterialNode.REFLECTIVITY );\nexport const materialRoughness = nodeImmutable( MaterialNode, MaterialNode.ROUGHNESS );\nexport const materialMetalness = nodeImmutable( MaterialNode, MaterialNode.METALNESS );\nexport const materialClearcoat = nodeImmutable( MaterialNode, MaterialNode.CLEARCOAT );\nexport const materialClearcoatRoughness = nodeImmutable( MaterialNode, MaterialNode.CLEARCOAT_ROUGHNESS );\nexport const materialRotation = nodeImmutable( MaterialNode, MaterialNode.ROTATION );\nexport const materialSheen = nodeImmutable( MaterialNode, MaterialNode.SHEEN );\nexport const materialSheenRoughness = nodeImmutable( MaterialNode, MaterialNode.SHEEN_ROUGHNESS );\nexport const materialIridescence = nodeImmutable( MaterialNode, MaterialNode.IRIDESCENCE );\nexport const materialIridescenceIOR = nodeImmutable( MaterialNode, MaterialNode.IRIDESCENCE_IOR );\nexport const materialIridescenceThickness = nodeImmutable( MaterialNode, MaterialNode.IRIDESCENCE_THICKNESS );\n\naddNodeClass( 'MaterialNode', MaterialNode );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}