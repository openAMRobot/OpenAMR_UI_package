{"ast":null,"code":"import _classCallCheck from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport UniformNode, { uniform } from '../core/UniformNode.js';\nimport { uv } from './UVNode.js';\nimport { textureSize } from './TextureSizeNode.js';\nimport { colorSpaceToLinear } from '../display/ColorSpaceNode.js';\nimport { context } from '../core/ContextNode.js';\nimport { expression } from '../code/ExpressionNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { addNodeElement, nodeProxy, vec3, nodeObject } from '../shadernode/ShaderNode.js';\nimport { NodeUpdateType } from '../core/constants.js';\nvar TextureNode = /*#__PURE__*/function (_UniformNode) {\n  _inherits(TextureNode, _UniformNode);\n  var _super = _createSuper(TextureNode);\n  function TextureNode(value) {\n    var _this;\n    var uvNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var levelNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var compareNode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    _classCallCheck(this, TextureNode);\n    _this = _super.call(this, value);\n    _this.isTextureNode = true;\n    _this.uvNode = uvNode;\n    _this.levelNode = levelNode;\n    _this.compareNode = compareNode;\n    _this.updateMatrix = false;\n    _this.updateType = NodeUpdateType.NONE;\n    _this.setUpdateMatrix(uvNode === null);\n    return _this;\n  }\n  _createClass(TextureNode, [{\n    key: \"getUniformHash\",\n    value: function getUniformHash( /*builder*/\n    ) {\n      return this.value.uuid;\n    }\n  }, {\n    key: \"getNodeType\",\n    value: function getNodeType( /*builder*/\n    ) {\n      if (this.value.isDepthTexture === true) return 'float';\n      return 'vec4';\n    }\n  }, {\n    key: \"getInputType\",\n    value: function getInputType( /*builder*/\n    ) {\n      return 'texture';\n    }\n  }, {\n    key: \"getDefaultUV\",\n    value: function getDefaultUV() {\n      return uv(this.value.channel);\n    }\n  }, {\n    key: \"updateReference\",\n    value: function updateReference( /*frame*/\n    ) {\n      return this.value;\n    }\n  }, {\n    key: \"getTransformedUV\",\n    value: function getTransformedUV(uvNode) {\n      var texture = this.value;\n      return uniform(texture.matrix).mul(vec3(uvNode, 1)).xy;\n    }\n  }, {\n    key: \"setUpdateMatrix\",\n    value: function setUpdateMatrix(value) {\n      this.updateMatrix = value;\n      this.updateType = value ? NodeUpdateType.FRAME : NodeUpdateType.NONE;\n      return this;\n    }\n  }, {\n    key: \"setup\",\n    value: function setup(builder) {\n      var properties = builder.getNodeProperties(this);\n\n      //\n\n      var uvNode = this.uvNode;\n      if (uvNode === null && builder.context.getUVNode) {\n        uvNode = builder.context.getUVNode(this);\n      }\n      if (!uvNode) uvNode = this.getDefaultUV();\n      if (this.updateMatrix === true) {\n        uvNode = this.getTransformedUV(uvNode);\n      }\n\n      //\n\n      var levelNode = this.levelNode;\n      if (levelNode === null && builder.context.getSamplerLevelNode) {\n        levelNode = builder.context.getSamplerLevelNode(this);\n      }\n\n      //\n\n      properties.uvNode = uvNode;\n      properties.levelNode = levelNode ? builder.context.getMIPLevelAlgorithmNode(this, levelNode) : null;\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(builder, output) {\n      var _builder$getNodePrope = builder.getNodeProperties(this),\n        uvNode = _builder$getNodePrope.uvNode,\n        levelNode = _builder$getNodePrope.levelNode;\n      var compareNode = this.compareNode;\n      var texture = this.value;\n      if (!texture || texture.isTexture !== true) {\n        throw new Error('TextureNode: Need a three.js texture.');\n      }\n      var textureProperty = _get(_getPrototypeOf(TextureNode.prototype), \"generate\", this).call(this, builder, 'property');\n      if (output === 'sampler') {\n        return textureProperty + '_sampler';\n      } else if (builder.isReference(output)) {\n        return textureProperty;\n      } else {\n        var nodeType = this.getNodeType(builder);\n        var nodeData = builder.getDataFromNode(this);\n        var propertyName = nodeData.propertyName;\n        if (propertyName === undefined) {\n          var uvSnippet = uvNode.build(builder, 'vec2');\n          var nodeVar = builder.getVarFromNode(this, nodeType);\n          propertyName = builder.getPropertyName(nodeVar);\n          var _snippet = null;\n          if (levelNode && levelNode.isNode === true) {\n            var levelSnippet = levelNode.build(builder, 'float');\n            _snippet = builder.getTextureLevel(texture, textureProperty, uvSnippet, levelSnippet);\n          } else if (compareNode !== null) {\n            var compareSnippet = compareNode.build(builder, 'float');\n            _snippet = builder.getTextureCompare(texture, textureProperty, uvSnippet, compareSnippet);\n          } else {\n            _snippet = builder.getTexture(texture, textureProperty, uvSnippet);\n          }\n          builder.addLineFlowCode(\"\".concat(propertyName, \" = \").concat(_snippet));\n          if (builder.context.tempWrite !== false) {\n            nodeData.snippet = _snippet;\n            nodeData.propertyName = propertyName;\n          }\n        }\n        var snippet = propertyName;\n        if (builder.needsColorSpaceToLinear(this.value)) {\n          snippet = colorSpaceToLinear(expression(snippet, nodeType), this.value.colorSpace).setup(builder).build(builder, nodeType);\n        }\n        return builder.format(snippet, nodeType, output);\n      }\n    }\n  }, {\n    key: \"uv\",\n    value: function uv(uvNode) {\n      var textureNode = this.clone();\n      textureNode.uvNode = uvNode;\n      return nodeObject(textureNode);\n    }\n  }, {\n    key: \"level\",\n    value: function level(levelNode) {\n      var textureNode = this.clone();\n      textureNode.levelNode = levelNode;\n      return context(textureNode, {\n        getMIPLevelAlgorithmNode: function getMIPLevelAlgorithmNode(textureNode, levelNode) {\n          return levelNode;\n        }\n      });\n    }\n  }, {\n    key: \"size\",\n    value: function size(levelNode) {\n      return textureSize(this, levelNode);\n    }\n  }, {\n    key: \"compare\",\n    value: function compare(compareNode) {\n      var textureNode = this.clone();\n      textureNode.compareNode = nodeObject(compareNode);\n      return nodeObject(textureNode);\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize(data) {\n      _get(_getPrototypeOf(TextureNode.prototype), \"serialize\", this).call(this, data);\n      data.value = this.value.toJSON(data.meta).uuid;\n    }\n  }, {\n    key: \"deserialize\",\n    value: function deserialize(data) {\n      _get(_getPrototypeOf(TextureNode.prototype), \"deserialize\", this).call(this, data);\n      this.value = data.meta.textures[data.value];\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var texture = this.value;\n      if (texture.matrixAutoUpdate === true) {\n        texture.updateMatrix();\n      }\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new this.constructor(this.value, this.uvNode, this.levelNode, this.compareNode);\n    }\n  }]);\n  return TextureNode;\n}(UniformNode);\nexport default TextureNode;\nexport var texture = nodeProxy(TextureNode);\n//export const textureLevel = ( value, uv, level ) => texture( value, uv ).level( level );\n\nexport var sampler = function sampler(aTexture) {\n  return (aTexture.isNode === true ? aTexture : texture(aTexture)).convert('sampler');\n};\naddNodeElement('texture', texture);\n//addNodeElement( 'textureLevel', textureLevel );\n\naddNodeClass('TextureNode', TextureNode);","map":{"version":3,"names":["UniformNode","uniform","uv","textureSize","colorSpaceToLinear","context","expression","addNodeClass","addNodeElement","nodeProxy","vec3","nodeObject","NodeUpdateType","TextureNode","_UniformNode","_inherits","_super","_createSuper","value","_this","uvNode","arguments","length","undefined","levelNode","compareNode","_classCallCheck","call","isTextureNode","updateMatrix","updateType","NONE","setUpdateMatrix","_createClass","key","getUniformHash","uuid","getNodeType","isDepthTexture","getInputType","getDefaultUV","channel","updateReference","getTransformedUV","texture","matrix","mul","xy","FRAME","setup","builder","properties","getNodeProperties","getUVNode","getSamplerLevelNode","getMIPLevelAlgorithmNode","generate","output","_builder$getNodePrope","isTexture","Error","textureProperty","_get","_getPrototypeOf","prototype","isReference","nodeType","nodeData","getDataFromNode","propertyName","uvSnippet","build","nodeVar","getVarFromNode","getPropertyName","snippet","isNode","levelSnippet","getTextureLevel","compareSnippet","getTextureCompare","getTexture","addLineFlowCode","concat","tempWrite","needsColorSpaceToLinear","colorSpace","format","textureNode","clone","level","size","compare","serialize","data","toJSON","meta","deserialize","textures","update","matrixAutoUpdate","constructor","sampler","aTexture","convert"],"sources":["/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/three/examples/jsm/nodes/accessors/TextureNode.js"],"sourcesContent":["import UniformNode, { uniform } from '../core/UniformNode.js';\nimport { uv } from './UVNode.js';\nimport { textureSize } from './TextureSizeNode.js';\nimport { colorSpaceToLinear } from '../display/ColorSpaceNode.js';\nimport { context } from '../core/ContextNode.js';\nimport { expression } from '../code/ExpressionNode.js';\nimport { addNodeClass } from '../core/Node.js';\nimport { addNodeElement, nodeProxy, vec3, nodeObject } from '../shadernode/ShaderNode.js';\nimport { NodeUpdateType } from '../core/constants.js';\n\nclass TextureNode extends UniformNode {\n\n\tconstructor( value, uvNode = null, levelNode = null, compareNode = null ) {\n\n\t\tsuper( value );\n\n\t\tthis.isTextureNode = true;\n\n\t\tthis.uvNode = uvNode;\n\t\tthis.levelNode = levelNode;\n\t\tthis.compareNode = compareNode;\n\n\t\tthis.updateMatrix = false;\n\t\tthis.updateType = NodeUpdateType.NONE;\n\n\t\tthis.setUpdateMatrix( uvNode === null );\n\n\t}\n\n\tgetUniformHash( /*builder*/ ) {\n\n\t\treturn this.value.uuid;\n\n\t}\n\n\tgetNodeType( /*builder*/ ) {\n\n\t\tif ( this.value.isDepthTexture === true ) return 'float';\n\n\t\treturn 'vec4';\n\n\t}\n\n\tgetInputType( /*builder*/ ) {\n\n\t\treturn 'texture';\n\n\t}\n\n\tgetDefaultUV() {\n\n\t\treturn uv( this.value.channel );\n\n\t}\n\n\tupdateReference( /*frame*/ ) {\n\n\t\treturn this.value;\n\n\t}\n\n\tgetTransformedUV( uvNode ) {\n\n\t\tconst texture = this.value;\n\n\t\treturn uniform( texture.matrix ).mul( vec3( uvNode, 1 ) ).xy;\n\n\t}\n\n\tsetUpdateMatrix( value ) {\n\n\t\tthis.updateMatrix = value;\n\t\tthis.updateType = value ? NodeUpdateType.FRAME : NodeUpdateType.NONE;\n\n\t\treturn this;\n\n\t}\n\n\tsetup( builder ) {\n\n\t\tconst properties = builder.getNodeProperties( this );\n\n\t\t//\n\n\t\tlet uvNode = this.uvNode;\n\n\t\tif ( uvNode === null && builder.context.getUVNode ) {\n\n\t\t\tuvNode = builder.context.getUVNode( this );\n\n\t\t}\n\n\t\tif ( ! uvNode ) uvNode = this.getDefaultUV();\n\n\t\tif ( this.updateMatrix === true ) {\n\n\t\t\tuvNode = this.getTransformedUV( uvNode );\n\n\t\t}\n\n\t\t//\n\n\t\tlet levelNode = this.levelNode;\n\n\t\tif ( levelNode === null && builder.context.getSamplerLevelNode ) {\n\n\t\t\tlevelNode = builder.context.getSamplerLevelNode( this );\n\n\t\t}\n\n\t\t//\n\n\t\tproperties.uvNode = uvNode;\n\t\tproperties.levelNode = levelNode ? builder.context.getMIPLevelAlgorithmNode( this, levelNode ) : null;\n\n\t}\n\n\tgenerate( builder, output ) {\n\n\t\tconst { uvNode, levelNode } = builder.getNodeProperties( this );\n\n\t\tconst compareNode = this.compareNode;\n\t\tconst texture = this.value;\n\n\t\tif ( ! texture || texture.isTexture !== true ) {\n\n\t\t\tthrow new Error( 'TextureNode: Need a three.js texture.' );\n\n\t\t}\n\n\t\tconst textureProperty = super.generate( builder, 'property' );\n\n\t\tif ( output === 'sampler' ) {\n\n\t\t\treturn textureProperty + '_sampler';\n\n\t\t} else if ( builder.isReference( output ) ) {\n\n\t\t\treturn textureProperty;\n\n\t\t} else {\n\n\t\t\tconst nodeType = this.getNodeType( builder );\n\t\t\tconst nodeData = builder.getDataFromNode( this );\n\n\t\t\tlet propertyName = nodeData.propertyName;\n\n\t\t\tif ( propertyName === undefined ) {\n\n\t\t\t\tconst uvSnippet = uvNode.build( builder, 'vec2' );\n\t\t\t\tconst nodeVar = builder.getVarFromNode( this, nodeType );\n\n\t\t\t\tpropertyName = builder.getPropertyName( nodeVar );\n\n\t\t\t\tlet snippet = null;\n\n\t\t\t\tif ( levelNode && levelNode.isNode === true ) {\n\n\t\t\t\t\tconst levelSnippet = levelNode.build( builder, 'float' );\n\n\t\t\t\t\tsnippet = builder.getTextureLevel( texture, textureProperty, uvSnippet, levelSnippet );\n\n\t\t\t\t} else if ( compareNode !== null ) {\n\n\t\t\t\t\tconst compareSnippet = compareNode.build( builder, 'float' );\n\n\t\t\t\t\tsnippet = builder.getTextureCompare( texture, textureProperty, uvSnippet, compareSnippet );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsnippet = builder.getTexture( texture, textureProperty, uvSnippet );\n\n\t\t\t\t}\n\n\t\t\t\tbuilder.addLineFlowCode( `${propertyName} = ${snippet}` );\n\n\t\t\t\tif ( builder.context.tempWrite !== false ) {\n\n\t\t\t\t\tnodeData.snippet = snippet;\n\t\t\t\t\tnodeData.propertyName = propertyName;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlet snippet = propertyName;\n\n\t\t\tif ( builder.needsColorSpaceToLinear( this.value ) ) {\n\n\t\t\t\tsnippet = colorSpaceToLinear( expression( snippet, nodeType ), this.value.colorSpace ).setup( builder ).build( builder, nodeType );\n\n\t\t\t}\n\n\t\t\treturn builder.format( snippet, nodeType, output );\n\n\t\t}\n\n\t}\n\n\tuv( uvNode ) {\n\n\t\tconst textureNode = this.clone();\n\t\ttextureNode.uvNode = uvNode;\n\n\t\treturn nodeObject( textureNode );\n\n\t}\n\n\tlevel( levelNode ) {\n\n\t\tconst textureNode = this.clone();\n\t\ttextureNode.levelNode = levelNode;\n\n\t\treturn context( textureNode, {\n\t\t\tgetMIPLevelAlgorithmNode: ( textureNode, levelNode ) => levelNode\n\t\t} );\n\n\t}\n\n\tsize( levelNode ) {\n\n\t\treturn textureSize( this, levelNode );\n\n\t}\n\n\tcompare( compareNode ) {\n\n\t\tconst textureNode = this.clone();\n\t\ttextureNode.compareNode = nodeObject( compareNode );\n\n\t\treturn nodeObject( textureNode );\n\n\t}\n\n\tserialize( data ) {\n\n\t\tsuper.serialize( data );\n\n\t\tdata.value = this.value.toJSON( data.meta ).uuid;\n\n\t}\n\n\tdeserialize( data ) {\n\n\t\tsuper.deserialize( data );\n\n\t\tthis.value = data.meta.textures[ data.value ];\n\n\t}\n\n\tupdate() {\n\n\t\tconst texture = this.value;\n\n\t\tif ( texture.matrixAutoUpdate === true ) {\n\n\t\t\ttexture.updateMatrix();\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.value, this.uvNode, this.levelNode, this.compareNode );\n\n\t}\n\n}\n\nexport default TextureNode;\n\nexport const texture = nodeProxy( TextureNode );\n//export const textureLevel = ( value, uv, level ) => texture( value, uv ).level( level );\n\nexport const sampler = ( aTexture ) => ( aTexture.isNode === true ? aTexture : texture( aTexture ) ).convert( 'sampler' );\n\naddNodeElement( 'texture', texture );\n//addNodeElement( 'textureLevel', textureLevel );\n\naddNodeClass( 'TextureNode', TextureNode );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}