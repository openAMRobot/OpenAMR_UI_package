{"ast":null,"code":"import _classCallCheck from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport NodeMaterial, { addNodeMaterial } from './NodeMaterial.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { cameraProjectionMatrix } from '../accessors/CameraNode.js';\nimport { materialRotation } from '../accessors/MaterialNode.js';\nimport { modelViewMatrix, modelWorldMatrix } from '../accessors/ModelNode.js';\nimport { positionLocal } from '../accessors/PositionNode.js';\nimport { float, vec2, vec3, vec4 } from '../shadernode/ShaderNode.js';\nimport { SpriteMaterial } from 'three';\nvar defaultValues = new SpriteMaterial();\nvar SpriteNodeMaterial = /*#__PURE__*/function (_NodeMaterial) {\n  _inherits(SpriteNodeMaterial, _NodeMaterial);\n  var _super = _createSuper(SpriteNodeMaterial);\n  function SpriteNodeMaterial(parameters) {\n    var _this;\n    _classCallCheck(this, SpriteNodeMaterial);\n    _this = _super.call(this);\n    _this.isSpriteNodeMaterial = true;\n    _this.lights = false;\n    _this.normals = false;\n    _this.colorNode = null;\n    _this.opacityNode = null;\n    _this.alphaTestNode = null;\n    _this.lightNode = null;\n    _this.positionNode = null;\n    _this.rotationNode = null;\n    _this.scaleNode = null;\n    _this.setDefaultValues(defaultValues);\n    _this.setValues(parameters);\n    return _this;\n  }\n  _createClass(SpriteNodeMaterial, [{\n    key: \"setupPosition\",\n    value: function setupPosition(_ref) {\n      var object = _ref.object,\n        context = _ref.context;\n      // < VERTEX STAGE >\n\n      var positionNode = this.positionNode,\n        rotationNode = this.rotationNode,\n        scaleNode = this.scaleNode;\n      var vertex = positionLocal;\n      var mvPosition = modelViewMatrix.mul(vec3(positionNode || 0));\n      var scale = vec2(modelWorldMatrix[0].xyz.length(), modelWorldMatrix[1].xyz.length());\n      if (scaleNode !== null) {\n        scale = scale.mul(scaleNode);\n      }\n      var alignedPosition = vertex.xy;\n      if (object.center && object.center.isVector2 === true) {\n        alignedPosition = alignedPosition.sub(uniform(object.center).sub(0.5));\n      }\n      alignedPosition = alignedPosition.mul(scale);\n      var rotation = float(rotationNode || materialRotation);\n      var cosAngle = rotation.cos();\n      var sinAngle = rotation.sin();\n      var rotatedPosition = vec2(\n      // @TODO: Maybe we can create mat2 and write something like rotationMatrix.mul( alignedPosition )?\n      vec2(cosAngle, sinAngle.negate()).dot(alignedPosition), vec2(sinAngle, cosAngle).dot(alignedPosition));\n      mvPosition = vec4(mvPosition.xy.add(rotatedPosition), mvPosition.zw);\n      var modelViewProjection = cameraProjectionMatrix.mul(mvPosition);\n      context.vertex = vertex;\n      return modelViewProjection;\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(source) {\n      this.positionNode = source.positionNode;\n      this.rotationNode = source.rotationNode;\n      this.scaleNode = source.scaleNode;\n      return _get(_getPrototypeOf(SpriteNodeMaterial.prototype), \"copy\", this).call(this, source);\n    }\n  }]);\n  return SpriteNodeMaterial;\n}(NodeMaterial);\nexport default SpriteNodeMaterial;\naddNodeMaterial('SpriteNodeMaterial', SpriteNodeMaterial);","map":{"version":3,"names":["NodeMaterial","addNodeMaterial","uniform","cameraProjectionMatrix","materialRotation","modelViewMatrix","modelWorldMatrix","positionLocal","float","vec2","vec3","vec4","SpriteMaterial","defaultValues","SpriteNodeMaterial","_NodeMaterial","_inherits","_super","_createSuper","parameters","_this","_classCallCheck","call","isSpriteNodeMaterial","lights","normals","colorNode","opacityNode","alphaTestNode","lightNode","positionNode","rotationNode","scaleNode","setDefaultValues","setValues","_createClass","key","value","setupPosition","_ref","object","context","vertex","mvPosition","mul","scale","xyz","length","alignedPosition","xy","center","isVector2","sub","rotation","cosAngle","cos","sinAngle","sin","rotatedPosition","negate","dot","add","zw","modelViewProjection","copy","source","_get","_getPrototypeOf","prototype"],"sources":["/home/darkadius/ros2_ws/src/BotshareWIP/ROS2/robotui/node_modules/three/examples/jsm/nodes/materials/SpriteNodeMaterial.js"],"sourcesContent":["import NodeMaterial, { addNodeMaterial } from './NodeMaterial.js';\nimport { uniform } from '../core/UniformNode.js';\nimport { cameraProjectionMatrix } from '../accessors/CameraNode.js';\nimport { materialRotation } from '../accessors/MaterialNode.js';\nimport { modelViewMatrix, modelWorldMatrix } from '../accessors/ModelNode.js';\nimport { positionLocal } from '../accessors/PositionNode.js';\nimport { float, vec2, vec3, vec4 } from '../shadernode/ShaderNode.js';\n\nimport { SpriteMaterial } from 'three';\n\nconst defaultValues = new SpriteMaterial();\n\nclass SpriteNodeMaterial extends NodeMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isSpriteNodeMaterial = true;\n\n\t\tthis.lights = false;\n\t\tthis.normals = false;\n\n\t\tthis.colorNode = null;\n\t\tthis.opacityNode = null;\n\n\t\tthis.alphaTestNode = null;\n\n\t\tthis.lightNode = null;\n\n\t\tthis.positionNode = null;\n\t\tthis.rotationNode = null;\n\t\tthis.scaleNode = null;\n\n\t\tthis.setDefaultValues( defaultValues );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tsetupPosition( { object, context } ) {\n\n\t\t// < VERTEX STAGE >\n\n\t\tconst { positionNode, rotationNode, scaleNode } = this;\n\n\t\tconst vertex = positionLocal;\n\n\t\tlet mvPosition = modelViewMatrix.mul( vec3( positionNode || 0 ) );\n\n\t\tlet scale = vec2( modelWorldMatrix[ 0 ].xyz.length(), modelWorldMatrix[ 1 ].xyz.length() );\n\n\t\tif ( scaleNode !== null ) {\n\n\t\t\tscale = scale.mul( scaleNode );\n\n\t\t}\n\n\t\tlet alignedPosition = vertex.xy;\n\n\t\tif ( object.center && object.center.isVector2 === true ) {\n\n\t\t\talignedPosition = alignedPosition.sub( uniform( object.center ).sub( 0.5 ) );\n\n\t\t}\n\n\t\talignedPosition = alignedPosition.mul( scale );\n\n\t\tconst rotation = float( rotationNode || materialRotation );\n\n\t\tconst cosAngle = rotation.cos();\n\t\tconst sinAngle = rotation.sin();\n\n\t\tconst rotatedPosition = vec2( // @TODO: Maybe we can create mat2 and write something like rotationMatrix.mul( alignedPosition )?\n\t\t\tvec2( cosAngle, sinAngle.negate() ).dot( alignedPosition ),\n\t\t\tvec2( sinAngle, cosAngle ).dot( alignedPosition )\n\t\t);\n\n\t\tmvPosition = vec4( mvPosition.xy.add( rotatedPosition ), mvPosition.zw );\n\n\t\tconst modelViewProjection = cameraProjectionMatrix.mul( mvPosition );\n\n\t\tcontext.vertex = vertex;\n\n\t\treturn modelViewProjection;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.positionNode = source.positionNode;\n\t\tthis.rotationNode = source.rotationNode;\n\t\tthis.scaleNode = source.scaleNode;\n\n\t\treturn super.copy( source );\n\n\t}\n\n}\n\nexport default SpriteNodeMaterial;\n\naddNodeMaterial( 'SpriteNodeMaterial', SpriteNodeMaterial );\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}